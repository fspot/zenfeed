<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Miximum</title><link>http://www.miximum.fr/</link><description></description><atom:link href="http://www.miximum.fr/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 26 Feb 2014 18:00:00 +0100</lastBuildDate><item><title>Dedibox + OpenVZ + vzdump + raspberrypi + crontab + rsync = ❤</title><link>http://www.miximum.fr/un-billet-de-developpeur-qui-parle-de-sysadmin.html</link><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/CNNG2GX2GW/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/CNNG2GX2GW_l.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Essayez de vous imaginer en train de faire la vaisselle avec des gants de boxe
et vous aurez une bonne image de ce à quoi je ressemble lorsque je dois faire de
l'administration système.&lt;/p&gt;
&lt;p&gt;Entre Heroku, Amazon, les pages Github et j'en passe, bien peu nombreux sont les
développeurs qui souhaitent encore gérer leur propre serveur. Pourtant, le
serveur dédié est devenu relativement abordable depuis la guerre des prix entre
Online et OVH, et reste un &lt;em&gt;must&lt;/em&gt; en terme de souplesse et de liberté.
Évidemment, il faut mettre les mains dans le cambouis.&lt;/p&gt;
&lt;p&gt;Jusqu'à il y a quelques semaines, je louais deux serveurs (!) : un censé être
réservé à des projets sensibles (ex&amp;nbsp;: ce blog, plutôt vital pour mon activité)
et l'autre réservé aux tests, préproduction des sites en développement, petits
projets qui s'accumulent et jamais mis à jour, etc. Au fil des ans, cette
configuration est vite devenue fort b**lique, sans compter le coût récurrent.&lt;/p&gt;
&lt;p&gt;J'ai donc décidé de tout mettre à plat et de ne plus louer qu'un seul serveur.
Évidemment, je me voyais mal héberger côte à côte des sites en production
vitaux, des backups de données confidentielles, et des vieux drupals pourris et
jamais mis à jour.&lt;/p&gt;
&lt;p&gt;Mon architecture est donc tout ce qu'il y a de plus classique, et répond aux
problématiques suivantes&amp;nbsp;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;me permettre d'héberger tout ce qui me passe par la tête&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;assurer un niveau de sécurité correct&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;faciliter les backups&amp;nbsp;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attention, si vous êtes admin système pro, ce post vous fera sans doute bien
rire. Pour les devs dont ce n'est pas l'activité principale, peut-être que ça
vous dépannera.&lt;/p&gt;
&lt;div class="section" id="des-machines-virtuelles-avec-openvz"&gt;
&lt;h2&gt;Des machines virtuelles avec OpenVZ&lt;/h2&gt;
&lt;p&gt;Dans la mesure ou j'ai une utilisation professionnelle de mon hébergement, je
peux me permettre de dépenser 30€ par mois pour de l'hébergement. J'ai donc fait
le choix d'une Dedibox classique à 30€ chez Online avec une installation Debian
Wheezy, ce qui est plus que largement suffisant pour faire tourner à peu près
n'importe quoi.&lt;/p&gt;
&lt;p&gt;L'astuce consiste à systématiquement créer des machines virtuelles pour héberger
chaque projet (sites, serveur de mail, serveur git, serveur de backup, etc.).&lt;/p&gt;
&lt;p&gt;J'ai fait le choix d'OpenVZ (et &lt;a class="reference external" href="http://positon.org/"&gt;j'ai été conseillé par des gens très bien&lt;/a&gt;). OpenVZ est une techno qui a fait ses preuves, et qui
permet de créer sur une machine physique plusieurs instances de systèmes
d'exploitation isolés. OpenVZ est un conteneur, ce qui signifie que chaque
machine virtuelle utilisera le noyau linux du système hôte, et qu'il n'est pas
possible d'installer un windows ou autre. En contrepartie, l'impact sur les
performances est très faible. Ça tombe bien, c'est ce qu'on veut : plein de
petits serveurs Debian.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://openvz.org/Installation_on_Debian"&gt;L'installation d'OpenVZ sur Debian est assez rapide et bien documentée&lt;/a&gt;, je vous laisse donc réaliser ces
opérations par vous même.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commander-quelques-ip-failover"&gt;
&lt;h2&gt;Commander quelques IP failover&lt;/h2&gt;
&lt;p&gt;Comme je veux que chaque machine soit indépendante et que je n'ai pas envie de
me compliquer la tâche, je loue également quelques &lt;em&gt;ip failover&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Le principe d'une &lt;em&gt;ip failover&lt;/em&gt; est simple : il s'agit simplement d'une adresse
ip supplémentaire que vous pouvez faire pointer vers votre machine, et affecter
à une instance OpenVZ. Vous pouvez alors faire pointer vos DNS vers ces ip
supplémentaires plutôt que vers l'ip principale de la machine.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/NE6QYY9QA2/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/NE6QYY9QA2_l.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;C'est très pratique, parce que le jour ou vous voulez changer de serveur, il
suffit de déplacer la machine virtuelle vers la nouvelle machine physique, et de
modifier la configuration de &lt;em&gt;l'ip failover&lt;/em&gt;. Pas besoin de toucher à la
configuration DNS. Et en 5 minutes, c'est fait. Pareil pour basculer d'un
serveur principal à un serveur de backup, c'est quasi transparent pour
l'utilisateur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creer-une-machine-virtuelle"&gt;
&lt;h2&gt;Créer une machine virtuelle&lt;/h2&gt;
&lt;p&gt;Une fois OpenVZ installé et les ip commandées, créer une nouvelle machine est
confondant de simplicité. Ici, 101 représente un identifiant arbitraire.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vzctl create 101 --ostemplate=debian-7.0-x86_64
vzctl set 101 --ipadd xx.xx.xx.xx --save
vzctl start 101
vzctl enter 101
&lt;/pre&gt;
&lt;p&gt;Et hop&amp;nbsp;! Vous voilà root sur une belle machine toute neuve, avec sa propre ip et
sa propre arborescence de fichier. Pour retourner sur la machine principale, il
suffit de terminer la console en cours (&lt;em&gt;exit&lt;/em&gt; ou ctrl^D). Vous pouvez également
vous connecter directement en ssh sur la machine fille.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="securiser-les-connexion-ssh"&gt;
&lt;h2&gt;Sécuriser les connexion ssh&lt;/h2&gt;
&lt;p&gt;Si vous avez déjà jeté un coup d'œil aux logs de tentatives de connexion,
vous connaissez déjà l'importance de bien configurer son serveur ssh. Une
solution fort simple et qui marche très bien est de désactiver purement et
simplement les connexions par mot de passe pour n'autoriser que les connexions
par clé publique.&lt;/p&gt;
&lt;p&gt;Comme il existe déjà des bazillions de tutos qui expliquent comment on fait ça,
je ne vais pas me répéter ici… Comment&amp;nbsp;? Si&amp;nbsp;? Bon, mais c'est vraiment pour vous
faire plaisir.&lt;/p&gt;
&lt;p&gt;Commencez par générer une clé publique sur votre machine locale (si ce n'a pas
encore été fait), et copiez la sur le serveur.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh-keygen -t dsa
ssh-copy-id -i ~/.ssh/id_dsa.pub user&amp;#64;xx.xx.xx.xx
&lt;/pre&gt;
&lt;p&gt;Vérifiez que vous vous connectez sans problème sans taper de mot de passe, puis
éditez le fichier de conf du serveur ssh (&lt;em&gt;/etc/ssh/sshd_config&lt;/em&gt;). Vérifiez la
présence des paramètres suivants.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication no
UsePAM yes
Match User git
    PasswordAuthentication yes
&lt;/pre&gt;
&lt;p&gt;Puis redémarrez le serveur ssh.&lt;/p&gt;
&lt;p&gt;Vous noterez qu'il est possible d'ajouter des exceptions. J'autorise par exemple
la connexion à l'utilisateur git avec un mot de passe, parce que ça me simplifie
grandement la vie. N'en abusez pas.&lt;/p&gt;
&lt;p&gt;N'oubliez pas de sécuriser &lt;strong&gt;toutes vos machines virtuelles et la machine
hôte&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heberger-un-serveur-web"&gt;
&lt;h2&gt;Héberger un serveur web&lt;/h2&gt;
&lt;p&gt;Chaque machine virtuelle est un véritable serveur que vous pouvez utiliser comme
bon vous semble. Par exemple pour &lt;a class="reference external" href="http://www.miximum.fr/deployer-django-en-production-nginx-gunicorn-supervisor.html"&gt;héberger un projet Django&lt;/a&gt;. Je ne vous refais pas le
topo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="un-serveur-de-mail-prive"&gt;
&lt;h2&gt;Un serveur de mail privé&lt;/h2&gt;
&lt;p&gt;Même chose, je me contenterai de &lt;a class="reference external" href="http://www.miximum.fr/synchronize-all-your-mailboxes-on-your-own-server.html"&gt;vous rediriger vers cet article écrit il y a
quelques temps&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="git-rural"&gt;
&lt;h2&gt;Git rural&lt;/h2&gt;
&lt;p&gt;Il y a les projets qu'on peux héberger sur Github, et puis il y a les autres.
Héberger un serveur git privé est simple comme bonjour, il suffit d'avoir un
serveur ssh qui tourne et git installé (&lt;em&gt;apt-get install git&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Commencez par créer l'utilisateur système approprié.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
adduser git
&lt;/pre&gt;
&lt;p&gt;Même si j'autorise les connexions ssh vers cet utilisateur pour gagner du temps,
je peux néanmoins limiter les possibilités pour un éventuel assaillant de
pourrir mon système, en limitant le shell de l'utilisateur. Dans &lt;em&gt;/etc/passwd&lt;/em&gt;,
remplacez le shell de l'utilisateur &lt;em&gt;git&lt;/em&gt; par &lt;em&gt;/usr/bin/git-shell/&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
&lt;/pre&gt;
&lt;p&gt;Vous pourrez vérifier que l'utilisateur git ne peux pas accéder à un shell
interactif en essayant de vous logguer avec ce compte.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
su - git
fatal: Interactive git shell is not enabled.
&lt;/pre&gt;
&lt;p&gt;Pour créer un nouveau dépôt&amp;nbsp;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd /home/git/
git init project.git --bare
chown git:git -R project.git
&lt;/pre&gt;
&lt;p&gt;Ensuite, depuis votre machine locale, il vous suffit de cloner le dépôt…&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone ssh://git&amp;#64;mon.serveur.git/home/git/project.git
&lt;/pre&gt;
&lt;p&gt;…ou de configurer le dépôt distant s'il s'agit d'un dépôt existant.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git remote add origin ssh://git&amp;#64;mon.serveur.git/home/git/project.git
git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="backup-all-the-things"&gt;
&lt;h2&gt;Backup ALL the things&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/MOZRL6635Q/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/MOZRL6635Q_l.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Un des très gros avantages des machines virtuelles, c'est que le backup devient
très simple. Plutôt que de se prendre la tête à sauvegarder chaque base de
données, chaque répertoire, chaque projet, etc., on sauvegardera toutes les
machines d'un coup&amp;nbsp;; chaque backup pourra être remonté en local en un éclair.&lt;/p&gt;
&lt;p&gt;On &lt;a class="reference external" href="http://openvz.org/Backup_of_a_running_container_with_vzdump"&gt;utilise pour ça l'utilitaire vzdump&lt;/a&gt;, à installer sur
la machine hôte.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install vzdump
&lt;/pre&gt;
&lt;p&gt;Le script de backup ira dans la crontab (&lt;em&gt;crontab -e&lt;/em&gt;).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SHELL=/bin/bash
HOME=/root/
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h  dom mon dow   command
42 2 * * * vzdump --all --suspend --mailto moi&amp;#64;gmail.com --maxfiles 5
&lt;/pre&gt;
&lt;p&gt;Toutes les nuits, une belle archive toute propre sera déposée pour chaque
machine dans &lt;em&gt;/var/lib/vz/dump/&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Évidemment, des backups qui restent sur le serveur ne vous serviront pas à grand
chose si ce même serveur plante, devient indisponible ou si vous oubliez de le
renouveler. L'idéal est donc de les rapatrier quotidiennement chez vous, ou
ailleurs.&lt;/p&gt;
&lt;p&gt;J'utilise pour ça un &lt;a class="reference external" href="http://www.raspberrypi.org/"&gt;raspberryPi&lt;/a&gt; branché sur un
bête disque usb. Ça peut rester allumer 100% du temps et &lt;a class="reference external" href="http://blog.idleman.fr/billet-invite-creer-un-nas-avec-le-raspberry-pi/"&gt;ça fait un nas pas naze&lt;/a&gt;. Sur la crontab du raspberry&amp;nbsp;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
42 3 * * * rsync root&amp;#64;monserveur.com:/var/lib/vz/dump/ /media/hdd/backups/openvz/ -av
&lt;/pre&gt;
&lt;p&gt;C'est tout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-aller-plus-loin"&gt;
&lt;h2&gt;Pour aller plus loin&lt;/h2&gt;
&lt;p&gt;Il existe tout un tas de super technologies toutes plus &lt;em&gt;in&lt;/em&gt; et modernes les
unes que les autres et que j'utiliserai peut-être un jour si la Terre sort de
son orbite et que les journées commencent à durer plus de 24h. En attendant, je
me contenterai de vous lister en vrac quelques noms&amp;nbsp;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://linuxcontainers.org/"&gt;Lxc&lt;/a&gt;&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.docker.io/"&gt;Docker&lt;/a&gt;&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.getchef.com/chef/"&gt;Chef&lt;/a&gt;,
&lt;a class="reference external" href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt;,
&lt;a class="reference external" href="http://www.saltstack.com/community/"&gt;Salt&lt;/a&gt;,
&lt;a class="reference external" href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 26 Feb 2014 18:00:00 +0100</pubDate><guid>tag:www.miximum.fr,2014-02-26:un-billet-de-developpeur-qui-parle-de-sysadmin.html</guid><category>adminsys</category><category>vps</category><category>openvz</category><category>git</category><category>ssh</category></item><item><title>Déployer Django en production avec Nginx, Gunicorn et Supervisor</title><link>http://www.miximum.fr/deployer-django-en-production-nginx-gunicorn-supervisor.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://www.miximum.fr/python-et-django-retour-dexperience-apres-deux-ans.html"&gt;Django, c'est bien&lt;/a&gt;. Par contre, déployer un projet Django en production, ce n'est pas toujours évident, surtout que la doc n'est pas forcément toujours très à jour à ce sujet.&lt;/p&gt;
&lt;p&gt;La dernière fois que j'ai dû effectuer un déploiement bien propre en production, j'ai un peu regretté de ne pas avoir sous la main un beau tuto bien récent, bête et méchant. Comme j'ai dû &lt;a class="reference external" href="http://phase.readthedocs.org/en/latest/production.html"&gt;rédiger la doc complète de l'opération&lt;/a&gt;, en voici la version française.&lt;/p&gt;
&lt;p&gt;Au menu : du Nginx en frontal et reverse proxy vers Gunicorn qui sert notre projet tournant dans un virtualenv (foutaises !). On y va&amp;nbsp;?!&lt;/p&gt;

&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/JGY2RNAK12/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/JGY2RNAK12_l.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="installer-les-paquets-necessaires"&gt;
&lt;h2&gt;Installer les paquets nécessaires&lt;/h2&gt;
&lt;p&gt;Que vous passiez par de l'hébergement mutualisé, un conteneur OpenVZ, une instance EC2 ou autre, je considère que vous démarrez avec un système Debian stable vierge.&lt;/p&gt;
&lt;p&gt;Commençons par installer les paquets nécessaires (et supprimer l'inutile).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get update
apt-get upgrade
apt-get purge apache2
apt-get install build-essential libpq-dev python-dev
apt-get install postgresql postgresql-contrib nginx git supervisor
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installer-node"&gt;
&lt;h2&gt;Installer Node&lt;/h2&gt;
&lt;p&gt;Ok, ok, ça peut sembler bizarre de commencer par installer Node.js. le fait est que j'utilise &lt;a class="reference external" href="http://django-pipeline.readthedocs.org/"&gt;l'excellent django-pipeline&lt;/a&gt; pour gérer la compression des assets, qui lui même utilise &lt;a class="reference external" href="https://github.com/yui/yuglify"&gt;yuglify&lt;/a&gt; pour la minification du js. Et le meilleur moyen d'installer yuglify, c'est encore avec npm.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd /opt/
wget http://nodejs.org/dist/latest/node-&amp;lt;latest_version&amp;gt;-linux-x64.tar.gz
tar -zvxf node-*.tar.gz
cd node-*
./configure
make
make install
&lt;/pre&gt;
&lt;p&gt;Installons yuglify dans la foulée.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
npm install -g yuglify
&lt;/pre&gt;
&lt;p&gt;(Je sais, je sais, c'est vraiment sortir la Grosse Bertha pour tuer une mouche. Passons.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creation-de-la-base-de-donnees"&gt;
&lt;h2&gt;Création de la base de données&lt;/h2&gt;
&lt;p&gt;J'utilise PostgreSQL pour gérer les données. Tout autre choix devra être justifié par une longue dissertation de 10 pages. En attendant, nous allons créer l'utilisateur et la BD.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
su - postgres
createuser -P

    Enter name of role to add: monprojet
    Enter password for new role: monprojet
    Enter it again: monprojet
    Shall the new role be a superuser? (y/n) n
    Shall the new role be allowed to create databases? (y/n) n
    Shall the new role be allowed to create more new roles? (y/n) n

createdb --owner monprojet monprojet
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installer-python"&gt;
&lt;h2&gt;Installer Python&lt;/h2&gt;
&lt;p&gt;C'est parti pour l'installation de notre langage préféré. On commence par pip et virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd
wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
python get-pip.py
pip install virtualenv virtualenvwrapper
&lt;/pre&gt;
&lt;p&gt;Créons l'utilisateur système:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
adduser monprojet --disabled-password
su - monprojet
&lt;/pre&gt;
&lt;p&gt;Ajoutons ces lignes à la fin du fichier &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.profile&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
export WORKON_HOME=~/.virtualenvs
mkdir -p $WORKON_HOME
source `which virtualenvwrapper.sh`
&lt;/pre&gt;
&lt;p&gt;Puis:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source ~./profile
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installer-l-application"&gt;
&lt;h2&gt;Installer l'application&lt;/h2&gt;
&lt;p&gt;Création du virtualenv, git clone, etc. Que du classique, les chemins et urls seront bien entendu à adapter en fonction de la configuration de votre projet.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd
mkvirtualenv monprojet
git clone https://git.monprojet.com/monprojet.git monprojet
cd monprojet
pip install -r requirements/production.txt
cd src
export DJANGO_SETTINGS_MODULE=core.settings.production
python manage.py collectstatic
python manage.py syncdb
&lt;/pre&gt;
&lt;p&gt;Voici un exemple de fichier &lt;tt class="docutils literal"&gt;requirements/production.txt&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-r base.txt

gunicorn==18.0
psycopg2==2.5.2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="faire-tourner-l-application"&gt;
&lt;h2&gt;Faire tourner l'application&lt;/h2&gt;
&lt;p&gt;Nous allons utiliser &lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn, un serveur d'application WSGI&lt;/a&gt; développé en Python. C'est lui qui va effectivement servir notre application. En fait, Gunicorn est déjà installé, puisqu'il était listé dans le fichier &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt;. Si ce n'était pas le cas, toutefois :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install gunicorn
&lt;/pre&gt;
&lt;p&gt;Django fournit directement une intégration à Gunicorn, aucune autre opération n'est donc nécessaire. C'est presque de la triche tellement c'est simple. Il faut évidemment activer l'application adéquate dans votre fichier de settings:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
INSTALLED_APPS += (
    'gunicorn',
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configurer-supervisor"&gt;
&lt;h2&gt;Configurer Supervisor&lt;/h2&gt;
&lt;p&gt;Supervisor est &lt;a class="reference external" href="http://supervisord.org/"&gt;un outil qui permet de contrôler les processus qui doivent tourner sur notre machine&lt;/a&gt;. Nous l'utilisons ici pour démarrer Gunicorn. Créez un fichier de config dans &lt;tt class="docutils literal"&gt;/etc/supervisor/conf.d/monprojet.conf&lt;/tt&gt;. Voici un exemple fonctionnel :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[program:monprojet]
environment=DJANGO_SETTINGS_MODULE='core.settings.production'
directory=/home/monprojet/monprojet/src
command=/home/monprojet/.virtualenvs/monprojet/bin/python manage.py run_gunicorn
user=monprojet
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/monprojet.log
redirect_stderr=true
&lt;/pre&gt;
&lt;p&gt;On lance tout ça :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
supervisorctl reread
supervisorctl reload
&lt;/pre&gt;
&lt;p&gt;Note : ces deux commandes seront à retaper en cas de modification de la conf de Supervisor. Notez que par défaut, &lt;tt class="docutils literal"&gt;run_gunicorn&lt;/tt&gt; lance gunicorn sur le port 8000 en localhost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configurer-le-serveur-web"&gt;
&lt;h2&gt;Configurer le serveur web&lt;/h2&gt;
&lt;p&gt;Passons à la configuration du serveur web. Je recommande fortement &lt;a class="reference external" href="http://nginx.org/"&gt;Nginx qui allie souplesse, légereté et puissance&lt;/a&gt;. Une fois qu'on y a goûté, difficile de revenir vers Apache et autres éléphants (et non, ce billet n'est pas sponsorisé).&lt;/p&gt;
&lt;p&gt;D'abord, je suppose que notre projet Django est le seul &lt;em&gt;virtual host&lt;/em&gt; servi. On va donc modifier le &lt;em&gt;virtual host&lt;/em&gt; par défaut dans &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-available/default&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
server {
        listen 80 default_server;
        return 444;
}
&lt;/pre&gt;
&lt;p&gt;Cette configuration signifie que tout ce qui ne tombera pas sur un &lt;em&gt;virtual host&lt;/em&gt; bien défini (accès par l'url directe, par exemple) sera pûrement rejeté par Nginx.&lt;/p&gt;
&lt;p&gt;Nous allons ensuite créer un &lt;em&gt;virtual host&lt;/em&gt; spécifique pour notre projet dans &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-available/monprojet&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
upstream monprojet {
    # En supposant que le serveur WSGI tourne sur le port 8000
    server localhost:8000;
}

# Redirection de monprojet.com vers www.monprojet.com
server {
    server_name monprojet.com
    return 301 $scheme://www.monprojet.com$request_uri;
}

server {
    server_name monprojet.com
    access_log /var/log/nginx/monprojet.access.log;
    error_log /var/log/nginx/monprojet.error.log;

    location /static/ {
        alias   /home/monprojet/monprojet/public/static/;
    }

    location /media/ {
        alias   /home/monprojet/monprojet/public/media/;
    }

    location / {
        proxy_pass http://monprojet;
        proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
&lt;/pre&gt;
&lt;p&gt;Nous adoptons ici une configuration en reverse-proxy. Nginx est utilisé en serveur frontal, pour servir les fichiers statiques et balancer la connexion au serveur WSGI. Vous allez voir, ça poutre des loutres.&lt;/p&gt;
&lt;p&gt;N'oublions pas de créer le lien symbolique pour l'activer :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ln -s /etc/nginx/sites-available/monprojet /etc/nginx/sites-enabled/
&lt;/pre&gt;
&lt;p&gt;Ni de redémarrer Nginx :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/etc/init.d/nginx restart
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="et-voila"&gt;
&lt;h2&gt;Et voilà !&lt;/h2&gt;
&lt;p&gt;Et vous voilà avec une configuration qui tronçonne du castor, capable d'encaisser un bon paquets de requêtes et de scaler sans trop de soucis. Était-ce vraiment si compliqué ? Non, non, ne me remerciez pas.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/8XWZPQHT6J/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/8XWZPQHT6J_l.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;à++;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Thu, 20 Feb 2014 20:00:00 +0100</pubDate><guid>tag:www.miximum.fr,2014-02-20:deployer-django-en-production-nginx-gunicorn-supervisor.html</guid><category>python</category><category>django</category><category>sysadmin</category><category>nginx</category><category>supervisor</category><category>gunicorn</category><category>virtualenv</category></item><item><title>Pour enfin comprendre Javascript</title><link>http://www.miximum.fr/pour-enfin-comprendre-javascript.html</link><description>&lt;p&gt;Il est des technologies qui se laissent facilement apprivoiser. Prenez Python, par exemple ; sa syntaxe est claire et limpide comme de la sueur de licorne et dès la première approche, le développeur se sentira aussi à l'aise qu'un Hobbit au fond de son trou. Jetez un œil à ce bout de code Python ; on dirait du Beaudelaire, n'est-ce pas&amp;nbsp;?&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pomodoro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;


&lt;span class="n"&gt;pomodoro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pomodoro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;D'autres langages, en revanche, feraient plutôt penser à de féroces étalons galopant l'écume aux dents dans les steppes de Mongolie. Ruby, par exemple&amp;nbsp;:&lt;/p&gt;

&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pomodoro&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:duration&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;&amp;#64;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;pomodoro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Pomodoro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Et puis il y a Javascript. La première fois que mes yeux se sont posés sur du Javascript, j'ai immédiatement visualisé un Panda borgne courant derrière son bus avec des chaussures trop grandes. Franchement, il faut bien avouer que la comparaison paraît plutôt défavorable&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Pomodoro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pomodoro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Pomodoro&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pomodoro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pomodoro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Pourtant, si Javascript fait partie des langages les plus utilisés aujourd'hui, c'est qu'il doit bien y avoir une raison. Si nous voulons apprendre à utiliser ce sympathique outil correctement, il nous faudra mettre de côté quelques minutes notre intégrisme ronchonnant et étudier ses entrailles un peu plus en détails.&lt;/p&gt;
&lt;div class="section" id="the-good-parts"&gt;
&lt;h2&gt;The good parts&lt;/h2&gt;
&lt;p&gt;Dans tout langage, il y a des éléments plus ou moins réussis. Le développeur expérimenté apprend vite à laisser de côté les éléments de syntaxe et les structures de données problématiques pour se concentrer sur l'important&amp;nbsp;: la lisibilité du code.&lt;/p&gt;
&lt;p&gt;Dans Javascript, il y a beaucoup de mauvais côtés. Beaucoup de failles de conception et d'éléments qui peuvent &lt;a class="reference external" href="https://www.destroyallsoftware.com/talks/wat"&gt;provoquer des bugs inattendus&lt;/a&gt; et rendre fou le développeur insouciant. À tel point que l'un des meilleurs livres sur Javascript s'appelle &lt;a class="reference external" href="http://javascript.crockford.com/"&gt;« The Good Parts », par Douglas Crockford&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apprivoiser Javascript, c'est accepter le fait qu'il y ait beaucoup d'éléments à laisser de côté pour se concentrer sur ce qui marche bien. Une fois passée cette étape, on évite les surprises désagréables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="la-base"&gt;
&lt;h2&gt;La base&lt;/h2&gt;
&lt;p&gt;Dans Javascript, il n'y a pas &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"&gt;150 types de données élémentaires&lt;/a&gt;. On trouve&amp;nbsp;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;les booléens (boolean) ;&lt;/li&gt;
&lt;li&gt;les chaînes de caractères (string) ;&lt;/li&gt;
&lt;li&gt;les nombres (number) ;&lt;/li&gt;
&lt;li&gt;et les objets (Object).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parmi les sous-types d'objets, on trouve entre autres&amp;nbsp;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;les tableaux (Array) ;&lt;/li&gt;
&lt;li&gt;les dates (Date) ;&lt;/li&gt;
&lt;li&gt;les expressions régulières (RexExp) ;&lt;/li&gt;
&lt;li&gt;et les fonction (Function).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Les deux structures de données les plus importantes sont &lt;strong&gt;les objets&lt;/strong&gt; et &lt;strong&gt;les fonctions&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="les-objets"&gt;
&lt;h2&gt;Les objets&lt;/h2&gt;
&lt;p&gt;Un objet est simplement une liste de valeur indexées par des clés qui sont des chaînes de caractère. Voici un très bel objet&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Miximum'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://www.miximum.fr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'developpement'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'freelance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'django'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'javascript'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Thibault'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Jouannic'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notez que les objets sont des types de données &lt;strong&gt;mutables&lt;/strong&gt;. On peut très bien écrire après coup&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Le blog d'un freelance mégalo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="les-fonctions"&gt;
&lt;h2&gt;Les fonctions&lt;/h2&gt;
&lt;p&gt;Une fonction est elle-même un objet, avec ceci de particulier qu'on peut l'invoquer.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;quot;Miximum&amp;quot;
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Une fonction étant un objet, on peut l'affecter à n'importe quelle variable. D'ailleurs, on préférera la syntaxe suivante, sémantiquement équivalente, plus claire, plus élégante, plus «&amp;nbsp;Javascript&amp;nbsp;»&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;get_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;En plus des arguments passés manuellement, chaque fonction en Javascript reçoit deux arguments particuliers, nommés &lt;strong&gt;arguments&lt;/strong&gt; et &lt;strong&gt;this&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arguments&lt;/strong&gt; contient la liste de tous les arguments passés lors de l'appel de la fonction.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 6.8
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Maintenant, &lt;strong&gt;this&lt;/strong&gt;. En Javascript, si une fonction est invoquée dans le contexte d'un objet (on parle alors de méthode), alors &lt;strong&gt;this&lt;/strong&gt; prend la valeur de cet objet.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Bob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Sponge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Bob Sponge
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C'est un peu piégeux, parce que &lt;strong&gt;this&lt;/strong&gt; n'est pas intrinsèquement lié à l'objet. Si la même fonction est invoquée hors dans le context global, alors &lt;strong&gt;this&lt;/strong&gt; prend la valeur de l'objet global (l'élément &lt;strong&gt;window&lt;/strong&gt; dans le contexte d'un navigateur), comme l'illustre le code suivant&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// undefined undefined
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Bon, jusque là, rien de trop difficile. Abordons maintenant la partie qui fâche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="eh-mec-t-as-pas-vu-ma-classe"&gt;
&lt;h2&gt;Eh mec ! T'as pas vu ma classe ?!&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/PK9VLGNMSN/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/PK9VLGNMSN_l.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Javascript est un langage sournois. Sisi, Javascript est sournois. Pour vous en convaincre, jetez un œil à la ligne suivante&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pomodoro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pomodoro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Rien de bien extraordinaire me direz-vous. On créé un objet en instanciant la classe &lt;em&gt;Pomodoro&lt;/em&gt; grâce au mot clé &lt;em&gt;new&lt;/em&gt;, comme dans la plupart des langages objets.&lt;/p&gt;
&lt;p&gt;Et c'est là que Javascript est vil. Parce que si Javascript reprend des éléments de syntaxe des langages à base de classes, le concept de classe n'existe pas en Javascript.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Il n'y a pas de classes en Javascript.&lt;/em&gt; Répétez après moi&amp;nbsp;: «&amp;nbsp;Il n'y a pas de classes en Javascript. Il n'y a pas…&amp;nbsp;»&lt;/p&gt;
&lt;p&gt;Python, Ruby, Java, etc. sont des langages objets, mais il faudrait préciser qu'il s'agit de langages à base de classes. Javascript est bien un langage objet, mais pas un langage à base de classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rappel-sur-les-classes"&gt;
&lt;h2&gt;Rappel sur les classes&lt;/h2&gt;
&lt;p&gt;Ça peut paraître imbécile de revenir sur des concepts qui semblent évident au développeur ayant plus de quelques mois d'expérience, mais pour bien comprendre Javascript, il faut se demander&amp;nbsp;: «&amp;nbsp;à quoi sert une classe&amp;nbsp;?&amp;nbsp;».&lt;/p&gt;
&lt;p&gt;Alors, je vous écoute&amp;nbsp;?!&lt;/p&gt;
&lt;p&gt;Dans la plupart des langages objets, la classe est le principal outil architectural. Architecturer du code, c'est concevoir une abstraction du problème sous forme d'interactions entre plusieurs éléments, et donc découper son programme en une hiérarchie de classes. Créer des objets nécessite d'instancier des classes, et donc de définir au préalable et une fois pour toute la structure de ces objets.&lt;/p&gt;
&lt;p&gt;Voici un très bel exemple de classe écrite en Python&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Represents a single user in the application.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'gloubiboulga'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create a new user.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firts_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Mark the user as authenticated.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="n"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Toto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d'Aumont de Rochebaron&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;toto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'schmilblick'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;toto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;  &lt;span class="c"&gt;# False&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Une classe a donc de nombreuses utilités&amp;nbsp;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architecturer le code&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;réutiliser du code&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;créer des abstractions facilitant la compréhension du problème&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dans la mesure ou Javacript ne propose pas le mécanisme des classes, &lt;strong&gt;il nous faut comprendre comment atteindre ces objectifs autrement&lt;/strong&gt;. Nous allons voir quels sont les éléments à notre disposition pour ça.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="le-pattern-constructor"&gt;
&lt;h2&gt;Le pattern constructor&lt;/h2&gt;
&lt;p&gt;Puisqu'il n'y a pas de classes en Javascript, pas besoin de s'embêter&amp;nbsp;; quand on a besoin d'un objet, on le créé à la volée.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Tata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'de La Rochette de Rochegonde'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Pourquoi faire plus complexe&amp;nbsp;? Évidemment, définir toute une série d'objets similaires deviendrait vite fastidieux, mais rien ne nous empêche de définir une fonction pour le faire à notre place.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;makeUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'de La Rochette de Rochegonde'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Toto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d'Aumont de Rochebaron&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;À vrai dire, ce pattern est tellement courant que Javascript propose une alternative syntaxique destinée à rendre l'opération plus claire.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'de La Rochette de Rochegonde'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Le fait d'appeler notre fonction grâce au mot clé &lt;strong&gt;new&lt;/strong&gt; va créer un objet à notre place, et le passer en paramètre &lt;strong&gt;this&lt;/strong&gt; de la fonction que l'on appelle. Ce n'est pas la seule opération réalisée par &lt;strong&gt;new&lt;/strong&gt;, mais nous verrons le reste plus tard.&lt;/p&gt;
&lt;p&gt;Notez qu'il n'y a pas besoin de retourner explitement &lt;strong&gt;this&lt;/strong&gt; à la fin de la fonction, Javascript le fait pour vous (c'est magique).&lt;/p&gt;
&lt;p&gt;Une fonction destinée à être appelée grâce à &lt;strong&gt;new&lt;/strong&gt; est un &lt;strong&gt;constructor&lt;/strong&gt;&amp;nbsp;; par convention son nom est défini en CamelCase.&lt;/p&gt;
&lt;p&gt;Notez que si vous oubliez d'utiliser &lt;strong&gt;new&lt;/strong&gt; en appelant votre fonction, alors &lt;strong&gt;this&lt;/strong&gt; équivaudra à l'objet global, ce qui peut produire des catastrophes assez imprévisibles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="les-prototypes"&gt;
&lt;h2&gt;Les prototypes&lt;/h2&gt;
&lt;p&gt;Si vous êtes suffisamment réveillés, vous avez du remarquer une faille dans le code ci-dessus. En effet, le corps de la méthode &lt;strong&gt;toString&lt;/strong&gt; est bel et bien dupliqué dans chaque objet instancié par &lt;strong&gt;User&lt;/strong&gt;. Ce qui fait que chaque &lt;strong&gt;User&lt;/strong&gt; dispose de sa propre méthode &lt;strong&gt;toString&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Toto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d'Aumont de Rochebaron&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'de La Rochette de Rochegonde'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I'm anonymous, bitch!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;tata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Tata de La Rochette de Rochegonde
&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// I'm anonymous, bitch!
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C'est un peu embêtant, parce que si je créé quelques centaines ou milliers d'objets &lt;strong&gt;User&lt;/strong&gt;, je vais monopoliser de la mémoire pour rien. Et puis, ça fait désordre.&lt;/p&gt;
&lt;p&gt;Heureusement, Javascript propose un concept qui permet le partage de code entre plusieurs objets. Il s'agit du &lt;strong&gt;mécanisme des prototypes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En Javascript, chaque objet est lié à un &lt;strong&gt;prototype&lt;/strong&gt;, qui est lui même un objet tout ce qu'il y a de plus standard. Lorsque l'on tente d'accéder à une propriété d'un objet, et que cette propriété n'existe pas, alors Javascript va vérifier si la propriété existe dans le prototype de l'objet.&lt;/p&gt;
&lt;p&gt;Par défaut, chaque objet est lié à &lt;strong&gt;Object.prototype&lt;/strong&gt;, &lt;strong&gt;Object&lt;/strong&gt; étant une variable globale définie au niveau du langage.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Tata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'de La Rochette de Rochegonde'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;tata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Tata de la Rochette de Rochegonde
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Évidemment, ce n'est pas forcément une bonne idée de modifier le prototype de l'objet standard. Ce qu'il faudrait, c'est pouvoir spécifier notre propre prototype. Et bien c'est également le rôle du mot clé &lt;strong&gt;new&lt;/strong&gt;. En effet, chaque fonction en Javascript dispose d'une propriété &lt;strong&gt;prototype&lt;/strong&gt; — c'est possible car une fonction est bien un objet, vous vous souvenez&amp;nbsp;? Quand vous utilisez le pattern constructor pour créer un objet, celui-ci est lié au prototype de ce constructor.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// {}
&lt;/span&gt;
&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'de La Rochette de Rochegonde'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;tata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Tata de la Rochette de Rochegonde
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ici, j'ajoute une fonction &lt;strong&gt;toString&lt;/strong&gt; dans le prototype de &lt;strong&gt;User&lt;/strong&gt; ; ainsi tous les objets créés par &lt;strong&gt;User&lt;/strong&gt; pourront disposer de la fonction &lt;strong&gt;toString&lt;/strong&gt; via leur prototype. Cool, non&amp;nbsp;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="l-heritage-prototypal"&gt;
&lt;h2&gt;L'héritage prototypal&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://i.miximum.fr/images/3PUTS72PQY/"&gt;&lt;img alt="" class="full" src="http://i.miximum.fr/i/2014/02/3PUTS72PQY_l.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Comme les lecteurs de Miximum sont particulièrement sagaces, je suis sûr qu'une question vous brûle les lèvres.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Si j'ai bien compris, chaque objet est lié à un prototype&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;– Exact&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;– Et un prototype est un objet comme les autres&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;– Toujours exact.&lt;/div&gt;
&lt;div class="line"&gt;– En toute logique, chaque prototype est donc lui-même lié à un prototype&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;– C'est vrai.&lt;/div&gt;
&lt;div class="line"&gt;– Haha&amp;nbsp;! C'est donc le colonel Moutarde l'assassin&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;– Heu…&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Si Javascript ne trouve pas une propriété dans un objet, il ira la chercher dans son prototype. Mais s'il ne l'y trouve pas, il ira chercher dans le prototype du prototype, etc. jusqu'au bout de la chaîne, c'est à dire jusqu'à &lt;strong&gt;Object.prototype&lt;/strong&gt;. On parle &lt;strong&gt;d'héritage prototypal&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gloubiboulga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ici, le chemin parcouru sera donc&amp;nbsp;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
toto -&amp;gt; User.prototype -&amp;gt; Function.prototype -&amp;gt; Object.prototype
&lt;/pre&gt;
&lt;p&gt;Nous pouvons tirer parti de ce mécanisme pour mettre un place un pseudo système d'héritage.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AnonymousUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AuthenticatedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Ici, on appelle manuellement le constructeur &amp;quot;parent&amp;quot;
&lt;/span&gt;    &lt;span class="nx"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;AuthenticatedUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;AuthenticatedUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post_comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// …
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Vous remarquerez que l'on est obligé de créer une instance &lt;em&gt;d'AnonymousUser&lt;/em&gt; au moment de la déclaration &lt;em&gt;d'AuthenticatedUser&lt;/em&gt;. Wat?! C'est effectivement un peu étrange d'un point de vue conceptuel. Néanmoins, le mécanisme des prototypes fait que les objets héritent directement des propriétés d'autres objets. Pour en savoir plus, &lt;a class="reference external" href="http://naholyr.fr/2011/02/le-point-sur-javascript-et-heritage-prototypal/"&gt;l'héritage prototypal est très bien expliqué chez Naholyr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On peut vérifier si un objet est lié au prototype d'un constructeur donné grâce à &lt;strong&gt;instanceof&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthenticatedUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tutu'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Ango de La Motte-Ango de Flers'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;AuthenticatedUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// true
&lt;/span&gt;&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true
&lt;/span&gt;&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true
&lt;/span&gt;&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// alse
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C'est d'ailleurs un choix terminologique douteux puisque parler &lt;em&gt;d'instance&lt;/em&gt; relève d'un abus de langage. Mais nous ne sommes plus à ça près.&lt;/p&gt;
&lt;p&gt;Quoiqu'il en soit, en Javascript, raisonner en hiérarchie de classes n'est plus le seul moyen de structurer une application. On tâchera donc de privilégier d'autres patterns, e.g. la composition plutôt que l'héritage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modules-closures-et-pattern-iife"&gt;
&lt;h2&gt;Modules, closures et pattern IIFE&lt;/h2&gt;
&lt;p&gt;Fort de ces nouveau concepts, tâchons de réécrire en Javascript notre classe &lt;em&gt;User&lt;/em&gt; définie un peu plus haut en Python.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="nx"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'gloubiboulga'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Toto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d'Aumont de Rochebaron&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'schmilblick'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// False
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C'est un peu mieux que tout à l'heure, mais pas encore ça. En l'état, la variable &lt;em&gt;PASSWORD&lt;/em&gt; est globale, et donc accessible depuis l'ensemble de l'application. Une solution toute simple serait d'englober notre contructeur dans une fonction.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;makeUserClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'gloubiboulga'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeUserClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;PASSWORD&lt;/em&gt; fait maintenant partie du &lt;em&gt;scope&lt;/em&gt; local à la fonction &lt;em&gt;makeUserClass&lt;/em&gt;, et n'est donc plus accessible globalement. Un bon point.&lt;/p&gt;
&lt;p&gt;Néanmoins, le fait que ce code puisse fonctionner semble franchement contre-intuitif. En effet, au moment ou &lt;em&gt;authenticate&lt;/em&gt; est appelée, l'exécution de &lt;em&gt;makeUserClass&lt;/em&gt; est depuis longtemps terminée. Il semble donc que les variables définies dans &lt;em&gt;makeUserClass&lt;/em&gt; ne soient pas détruites même après la fin de l'exécution de la fonction.&lt;/p&gt;
&lt;p&gt;Ce mécanisme porte &lt;strong&gt;le doux nom de closures&lt;/strong&gt;&amp;nbsp;: en Javascript, une fonction définie dans une autre fonction peut accéder au &lt;em&gt;scope&lt;/em&gt; de sa fonction parente, même si l'exécution de cette dernière est terminée.&lt;/p&gt;
&lt;p&gt;Nous pourrions aller encore plus loin. En effet, la fonction &lt;em&gt;makeUserClass&lt;/em&gt; n'est pas destinée à être réutilisée puisqu'elle est n'est appelée qu'une fois juste après sa définition. Pourquoi alourdir le code pour lui donner un nom&amp;nbsp;?&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'gloubiboulga'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ici, notre fonction est définie puis appelée immédiatement grâce à la syntage &lt;cite&gt;(function() {…})();&lt;/cite&gt; On parle de &lt;strong&gt;IIFE, pour Immediately Invoked Function Expression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La dernière étape sera de modifier encore un peu notre syntaxe pour faire de notre IIFE un véritable module, capable de définir et d'exporter plusiers objets à la fois.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'gloubiboulga'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Dans le context global, &lt;em&gt;this&lt;/em&gt; prend la valeur de l'objet global. En passant &lt;em&gt;this&lt;/em&gt; en paramètre à notre module, on lui permet donc d'injecter dans le &lt;em&gt;scope&lt;/em&gt; global tous les objets qu'il souhaite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="le-mot-de-la-fin"&gt;
&lt;h2&gt;Le mot de la fin&lt;/h2&gt;
&lt;p&gt;Voilà beaucoup de nouveaux concepts à digérer d'un coup, je vais donc m'arrêter là pour aujourd'hui. L'important à retenir est que Javascript est un langage qui a ses spécificités et qui ne se laissera pas apprivoiser à moins de prendre le temps de bien assimiler son fonctionnement et sa philosophie.&lt;/p&gt;
&lt;p&gt;Au lieu de tenter bêtement de tordre Javascript pour y appliquer des concepts pour lesquels il n'est pas pertinent, pourquoi ne profiter de l'opportunité pour se débarrasser de quelques idées préconçues et &lt;a class="reference external" href="https://nicolas.perriault.net/code/2013/functional-javascript-for-crawling-the-web/"&gt;embrasser de nouvelles façons de penser&lt;/a&gt;&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;Sur ce, à plus tard dans l'autocar.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 18 Feb 2014 20:00:00 +0100</pubDate><guid>tag:www.miximum.fr,2014-02-18:pour-enfin-comprendre-javascript.html</guid><category>javascript</category><category>prototype</category><category>héritage prototypal</category><category>IIFE</category><category>poo</category></item><item><title>Le Miximum nouveau est arrivé</title><link>http://www.miximum.fr/le-miximum-nouveau-est-arrive.html</link><description>&lt;p&gt;Cela faisait quelques temps que le design et les technologies employées pour servir Miximum.fr ne me satisfaisaient plus. Je profite donc de la nouvelle année pour mettre tout ça à jour, hop! hop! hop!&lt;/p&gt;

&lt;p&gt;Le plus important : bye bye Wordpress, &lt;a class="reference external" href="http://docs.getpelican.com/"&gt;hello Pelican&lt;/a&gt;. Même si l'interface du célèbre moteur de blog est attrayante, ce qui se cache sous le capot est beaucoup moins reluisant. Ras-le-bol de devoir se coltiner les mises à jour tous les 4 matins pour éviter les failles de sécurité. Et puis, quand on a pris l'habitude de travailler avec de bons outils, remettre la main dans un thème Wordpress, c'est franchement désagréable.&lt;/p&gt;
&lt;p&gt;Pelican est donc un générateur de blog statique. Le contenu est écrit dans des fichiers texte, et l'intégralité des pages html du site sont générées en local avant d'être &lt;em&gt;rsynquées&lt;/em&gt; sur le serveur. Simplicité++. Sécurité++. Performance++.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;On m'a signalé que suite à cette migration, tous les billets de Miximum ont décidé de revenir s'inviter dans certains lecteurs RSS. Je présente mes excuses pour la pollution visuelle et le spam (involontaire) aux personnes concernées.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Côté design, j'ai taillé dans le lard, autant par goût personnel que parce que j'ai franchement autre chose à f**tre que de tripatouiller du CSS pour un résultat au mieux à peine convainquant.&lt;/p&gt;
&lt;p&gt;J'ai donc utilisé &lt;a class="reference external" href="http://tinytypo.tetue.net/"&gt;l'excellentissime TinyTypo&lt;/a&gt; de &lt;a class="reference external" href="http://romy.tetue.net/"&gt;Romy Duhem-Verdière&lt;/a&gt;. Si vous ne connaissez pas ce projet, jetez-y un œil, il est vraiment chouette.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="CSS" class="full" src="http://i.imgur.com/Q3cUg29.gif" /&gt;
&lt;/div&gt;
&lt;p&gt;Reste donc la &lt;a class="reference external" href="http://marieguillaumet.com/apologie-des-commentaires-de-blog/"&gt;question des commentaires&lt;/a&gt;&amp;nbsp;; Miximum étant maintenant entièrement et uniquement constitué de pages HTML statiques, il n'est plus possible de mettre un formulaire de commentaire à disposition, et je n'ai pas envie de dépendre d'un service extérieur comme Disqus.&lt;/p&gt;
&lt;p&gt;La question reste en suspens. Je pense que je prendrai un peu de temps pour récupérer les commentaires des quelques rares articles ayant soulevé de réelles conversations intéressantes (a.k.a les trolls). Pour les autres, je considère ça comme une application unilatérale du droit à l'oubli.&lt;/p&gt;
&lt;p&gt;Sur ce, à plus dans le minibus!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Thu, 13 Feb 2014 13:30:00 +0100</pubDate><guid>tag:www.miximum.fr,2014-02-13:le-miximum-nouveau-est-arrive.html</guid></item><item><title>Le monde merveilleux des recruteurs</title><link>http://www.miximum.fr/le-monde-merveilleux-des-recruteurs.html</link><description>&lt;div class="figure align-center"&gt;
&lt;img alt="«&amp;nbsp;Bonjour à toutes et à tous…&amp;nbsp;»" class="full" src="http://www.miximum.fr/wp-content/uploads/2014/01/jp-pernaut.png" /&gt;
&lt;p class="caption"&gt;«&amp;nbsp;Bonjour à toutes et à tous…&amp;nbsp;»&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;« Bonjour à toutes et à tous&amp;nbsp;!&amp;nbsp;Ce mardi 8 octobre, l'actualité du jour, c'est bien évidemment l'ouverture de la chasse. De bon matin, tous les recruteurs de la région se sont réunis pour chasser ingénieurs et techniciens qui constitueront les futurs cheptels des départements informatiques de leurs entreprises. Découvrez notre reportage, Martha Coustique et Jean-Pierre Bière.&amp;nbsp;»&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Plan sur un sous-bois dans la brume du matin. Un groupe d'hommes, tweed et flanelle.&lt;/em&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;« Alors, cette chasse ?&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;– Pas mal, quelques dévs python, deux ou trois intégrateurs. J'ai manqué un dev javascript de peu, il s'est échappé dans les fourrés.&lt;/div&gt;
&lt;div class="line"&gt;– Quel dommage !&lt;/div&gt;
&lt;div class="line"&gt;– Si je vous dis que j'ai vu un Admin sys, vous ne le croirez pas !&lt;/div&gt;
&lt;div class="line"&gt;– Non ! Vous l'avez eu ?!&lt;/div&gt;
&lt;div class="line"&gt;– C'était trop beau, mais j'ai déjà dépassé mon quota. Je n'ai pas osé tirer.&lt;/div&gt;
&lt;div class="line"&gt;– Tout ça, ce n'est rien ! Moi, j'ai eu un coach agile dans le viseur. Sans le temblement de la jeep, je ne l'aurais pas manqué.&lt;/div&gt;
&lt;div class="line"&gt;– Pff ! Ce Perkins, toujours en train de se vanter.&lt;/div&gt;
&lt;div class="line"&gt;– Moi, ce reviens bredouille. Pourtant, ma startup aurait bien besoin de deux ou trois développeurs php.&lt;/div&gt;
&lt;div class="line"&gt;– Rhooo, le développeur php, on en trouve de très biens au supermarché.&lt;/div&gt;
&lt;div class="line"&gt;– Excusez-moi, mais le développeur php sauvage, c'est quand même vachement meilleur.&lt;/div&gt;
&lt;div class="line"&gt;– Bon, c'est pas tout ça, mais quand faut-y-aller, faut-y-aller.&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Plan sur la journaliste, bonnet et joues rosies par la fraîcheur du petit-matin.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;«&amp;nbsp;Le froid matinal n'est pas suffisant pour démotiver les chasseurs de tête de l'industrie informatique. Tenues de camouflage, bottes aux pieds et fusils chargés à la seringue hypodermique, ils sont tous réunis à l'entrée du bois de Vincennes pour chasser le développeur sauvage. Deux semaines, c'est le temps qu'ils auront pour reconstituer les équipes des départements IT de leurs employeurs.&amp;nbsp;»&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Plan sur un homme, gros nez rubicond, engoncé dans une parka vert bouteille.&lt;/em&gt;&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Aujourd'hui, l'informatique, y-en a partout, alors il faut bien trouver les ressources pour s'en occuper, hein&amp;nbsp;?!&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Et vous chassez quel type de gibier, cette année&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Ah bah, faut renouveler tout le cheptel du département QA, et puis il nous faudrait bien deux ou trois chefs de projets pour passer l'hiver.&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;«&amp;nbsp;Développeurs, intégrateurs, architectes&amp;nbsp;; le bois de Vincennes est connu pour être parmi les forêts les plus giboyeuses de France. Malgré cette abondance, le gouvernement a du imposer des quotas pour permettre le renouvellement des cheptels. Des contrôles qui ne sont pas forcément du goût de tout le monde. »&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Évidemment, on chasse le développeur senior. Le junior, c'est facile, il se méfie pas trop&amp;nbsp;; il suffit de l'appâter avec le dernier framework js et pan&amp;nbsp;! Mais bon, qu'est-ce que vous voulez qu'on en fasse après&amp;nbsp;? Ça se congèle pas bien, il faut les consommer tout de suite.&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Que pensez-vous des quotas imposés par le gouvernement&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— (Haussement d'épaules) C'est sûr qu'il y a les bons et les mauvais recruteurs. Il y en a qui chassent pour le sport et ils ramènent plus qu'ils peuvent embaucher. D'autres qui tirent sur tout ce qui bouge sans même vérifier le CV. Alors forcément, ça coince.&lt;/div&gt;
&lt;div class="line"&gt;— Et vous pensez que les quotas vont changer les choses&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Boaf, vous savez, un recruteur malhonnête, il viendra toujours braconner le stagiaire quand ça lui chante.&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="chasseur" src="http://www.miximum.fr/wp-content/uploads/2013/11/chasseur.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;«&amp;nbsp;Malgré ces quelques contrariétés, la chasse reste un moment convivial. Après une dure journée de battue, nos valeureux chasseurs se retrouvent au bistrot pour se vanter de leurs exploits.&amp;nbsp;»&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;« Les gars ! les gars&amp;nbsp;! J'en ai eu une&amp;nbsp;! une développeuse&amp;nbsp;! C'est ma tournée&amp;nbsp;!&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Bravo Jean-Louis&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— (en apparté) C'est difficile à chasser, la développeuse&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— La développeuse, c'est très dur à chasser. On nous reproche de faire de la discrimination des genres à l'embauche, mais la vérité, c'est qu'elles sont beaucoup plus petites et elles font moins de bruit. Forcément, c'est beaucoup plus difficile de les repérer dans les fourrés.&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Dernier plan sur la journaliste pour la conclusion.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;«&amp;nbsp;La chasse fut rude, mais la chasse fut bonne . Alors que nos courageux recruteurs savourent un repos bien mérité, leurs prises sont d'ores et déjà acheminés par fourgon jusqu'aux sièges sociaux de leurs employeurs. Une fois réveillés, on leur fournira un costume et un CDI avec période d'essai reconductible&amp;nbsp;; ils seront alors prêt à être intégrés à leurs nouveaux départements informatiques.&amp;nbsp;»&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fondu au noir.&lt;/em&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Mon, 20 Jan 2014 17:17:00 +0100</pubDate><guid>tag:www.miximum.fr,2014-01-20:le-monde-merveilleux-des-recruteurs.html</guid></item><item><title>Introduction à D3.js et aux documents pilotés par les données</title><link>http://www.miximum.fr/introduction-a-d3-js-et-aux-documents-pilotes-par-les-donnees.html</link><description>&lt;div class="figure align-center"&gt;
&lt;img alt="" class="full" src="http://www.miximum.fr/wp-content/uploads/2014/01/d3intro.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://d3js.org/"&gt;La sympathique D3.js&lt;/a&gt; est une bibliothèque qui permet de manipuler des documents à partir de jeux de données de manière très puissante et élégante. Elle est particulièrement adaptée à tout projet de présentation graphique de données, &lt;a class="reference external" href="http://pmdr.io"&gt;mais pas que&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pour vous faire une idée des possibilités de la bête, je vous encourage à &lt;a class="reference external" href="https://github.com/mbostock/d3/wiki/Gallery"&gt;jeter un œil sur la liste d'exemples&lt;/a&gt; qui en devient presque ridicule tant elle est immense. Impressionnant, n'est-ce pas&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;À quoi sert D3 et comment fonctionne-t-elle (car j'ai décidé qu'elle serait féminine)&amp;nbsp;? Amusons-nous avec pour le découvrir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avertissement&lt;/strong&gt; : si votre navigateur ne supporte pas svg, vous ne pourrez pas profiter des chatoyants exemples de ce billet. Tant pis pour vous.&lt;/p&gt;

&lt;div class="section" id="qu-est-ce-que-d3-js"&gt;
&lt;h2&gt;Qu'est-ce que d3.js&amp;nbsp;?&lt;/h2&gt;
&lt;p&gt;Pour faire simple, D3 permet de transformer un document en fonction de données que vous lui passez. D3 permet donc de représenter des données en utilisant les standards du Web (SVG, HTML, CSS, Javascript). C'est en fait un outil de transformation, non de présentation. D'ailleurs, «&amp;nbsp;D3&amp;nbsp;» vient de «&amp;nbsp;Data driven documents&amp;nbsp;».&lt;/p&gt;
&lt;p&gt;Prenons un exemple basique&amp;nbsp;: imaginons que je dispose d'une API qui renvoie un nombre aléatoire de paragraphes de faux texte (lorem ipsum…). Dans le cadre de la construction d'&lt;a class="reference external" href="http://lorem.prj.miximum.fr/"&gt;un générateur de faux-texte minimaliste et efficace&lt;/a&gt;, je veux afficher ces paragraphes dans des balises &amp;lt;p&amp;gt; dans une page HTML.&lt;/p&gt;
&lt;p&gt;Accrochez-vous à votre siège et jetez un rapide coup d'œil à ce code que je me suis forcé à commettre&amp;nbsp;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lorem-container&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#lorem-container'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'bla bla bla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gloubigoulba'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'schtroumpf'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ouh&amp;nbsp;! Bouh&amp;nbsp;! Comme c'est moche&amp;nbsp;! Et encore, je vous laisse imaginer la tronche de ce code sans le sucre syntaxique offert par jQuery.&lt;/p&gt;
&lt;p&gt;Voici maintenant la version D3 :&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lorem-container&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'bla bla bla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gloubigoulba'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'schtroumpf'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;paragraphs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#lorem-container'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ce code est confondant d'élégance et de simplicité, même s'il mérite une petite explication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comprendre-les-selections-de-d3"&gt;
&lt;h2&gt;Comprendre les sélections de D3&lt;/h2&gt;
&lt;p&gt;Déroulons le code précédent pas à pas pour en comprendre le fonctionnement.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;paragraphs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#container'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Les méthodes `select` et `selectAll` permettent de retourner une sélection d'éléments, un peu à la manière de jQuery. On peut très facilement affecter des propriétés à tous les éléments de la sélection d'un coup, par exemple :&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;paragraphs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#container'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'background-color'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'initial text'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, mais dans le cas présent, il n'existe pas d'éléments «&amp;nbsp;p&amp;nbsp;» dans mon document, donc ma sélection est vide&amp;nbsp;? Oui, lisez la suite pour comprendre.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La fonction `data` permet de coupler une sélection d'éléments à un jeu de données, c'est à dire que chaque entrée du tableau `data` aura une correspondance directe avec un et un seul élément de la sélection. Certes, mais que se passe-t-il si le nombre d'éléments de la sélection ne correspond pas à la quantité de données (c'est le cas ici, notre sélection est toujours vide)&amp;nbsp;? Ou si des données disparaissent du tableau et que d'autres y sont insérées entre deux mises à jour&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;En fait, cette opération va transformer notre unique sélection d'éléments en trois sélections distinctes, portant les petits noms suivants&amp;nbsp;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;update&lt;/strong&gt;&amp;nbsp;: les éléments de la sélection initiale qui sont liés à une entrée du tableau `data`&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enter&lt;/strong&gt;&amp;nbsp;: les éléments du tableau `data` «&amp;nbsp;en trop&amp;nbsp;» qui ne correspondent à aucun nœud dans le DOM&amp;nbsp;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exit&lt;/strong&gt;&amp;nbsp;: les éléments de la sélection qui étaient liés à une donnée qui a maintenant disparu&amp;nbsp;;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;D3 nous permet donc de répondre à trois questions :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Que fait-on des éléments déjà présent dans le document alors qu'ils représentent des données qui ont peut-être été mises à jour&amp;nbsp;?&lt;/li&gt;
&lt;li&gt;Que fait-on lorsque l'on reçoit de nouvelles données&amp;nbsp;?&lt;/li&gt;
&lt;li&gt;Que fait-on des nœuds qui ne servent plus à rien&amp;nbsp;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dans notre exemple, notre fonction n'est appelée qu'une fois, un seul cas de figure va se présenter. Poursuivons notre analyse.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La fonction `enter` nous permet de travailler sur la sélection correspondante, i.e les données sans nœud correspondant.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Pour chaque entrée du tableau `data`, on créé un nouveau nœud &amp;lt;p&amp;gt;&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Et pour chacun de ces nouveaux éléments, on déclare que le texte correspondra au &lt;em&gt;datum&lt;/em&gt; (entrée du tableau `data`) correspondant.&lt;/p&gt;
&lt;p&gt;Pfiou&amp;nbsp;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="travailler-avec-les-selections"&gt;
&lt;h2&gt;Travailler avec les sélections&lt;/h2&gt;
&lt;p&gt;Si vous êtes comme moi, il vous faudra sans doute relire la section précédente trois ou quatre fois avant de bien comprendre de quoi il retourne. Voici un exemple plus complet qui fait intervenir les trois sélections. C'est très exactement ce code qui est utilisé sur &lt;a class="reference external" href="http://lorem.prj.miximum.fr/"&gt;mon générateur de Lorem ipsum&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="c1"&gt;// Chaque fois que je clique sur un bouton, je récupère de nouveaux
// paragraphes de faux textes, que je veux afficher à la place
// des précédents.
&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;paragraphs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#text'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// On créé les éléments &amp;quot;p&amp;quot; pour les nouvelles données
&lt;/span&gt;    &lt;span class="nx"&gt;paragraphs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// `selectAll` renvoie la section &amp;quot;update&amp;quot;
&lt;/span&gt;    &lt;span class="c1"&gt;// On configure le texte des nœuds
&lt;/span&gt;    &lt;span class="nx"&gt;paragraphs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// On supprime les nœuds qui n'ont plus lieu d'être
&lt;/span&gt;    &lt;span class="nx"&gt;paragraphs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="et-sinon-dans-la-vraie-vie"&gt;
&lt;h2&gt;Et sinon, dans la vraie vie&amp;nbsp;?&lt;/h2&gt;
&lt;p&gt;J'avoue qu'utiliser D3 pour un besoin aussi simple, c'est un peu comme sortir les Canadair pour éteindre une allumette. Mais si vous avez compris les sélections, vous avez compris D3. Pour autant, c'est loin d'être la seule fonctionnalité de l'outil, et l'&lt;a class="reference external" href="https://github.com/mbostock/d3/wiki/API-Reference"&gt;API est longue comme le bras&lt;/a&gt;. Outils mathématique, gestion du temps, helpers graphiques, chargement de ressources distantes, cartographie, géométrie, etc. Il-y-a de quoi s'amuser.&lt;/p&gt;
&lt;p&gt;Voici un exemple un peu plus complet. Nous souhaitons par exemple &lt;a class="reference external" href="http://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen.html"&gt;visualiser des données économiques et sociales sur les pays émergents&lt;/a&gt;, même si pour faciliter la démonstration nous nous contenterons de données générées aléatoirement.&lt;/p&gt;
&lt;div id="chart" style="width: 600px; height: 400px;"&gt;&lt;/div&gt;
&lt;div class="center"&gt;
&lt;button id="update-data"&gt;Update data&lt;/button&gt;
&lt;/div&gt;
&lt;style&gt;
.axis text {
    font: 10px sans-serif;
}
.axis path,
.axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
}
&lt;/style&gt;
&lt;script src="http://miximum.fr/wp-content/d3.js"&gt;&lt;/script&gt;
&lt;script&gt;
var margin = { top: 20, right: 20, bottom: 50, left: 100 },
    width = 600 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;
var x = d3.scale.linear()
    .range([0, width])
    .domain([0, 100]);
var y = d3.scale.linear()
    .range([0, height])
    .domain([0, 100]);
var r = d3.scale.linear()
    .range([5, 30])
    .domain([0, 10]);
var color = d3.scale.category20();
var chart = d3.select('#chart').append('svg')
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");
chart.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);
var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");
chart.append("g")
    .attr("class", "y axis")
    .call(yAxis);
function getData() {
    var _randomData = function() {
        return {
            x: Math.floor(Math.random() * 100),
            y: Math.floor(Math.random() * 100),
            r: Math.floor(Math.random() * 10),
        };
    };
    var nbData = Math.floor(Math.random() * 8) + 3;
    return d3.range(nbData).map(_randomData);
};
function redraw(data) {
    var circles = chart.selectAll('circle')
        .attr("class", "chart")
        .data(data);
    circles.enter().append('circle')
        .attr("cx", function(d) { return x(d.x); })
        .attr("cy", function(d) { return height - y(d.y); })
        .attr("r", 0);
    circles.exit()
        .transition()
        .duration(750)
        .attr("r", 0)
        .remove();
    circles
        .attr("fill", function(d, i) { return color(i); })
        .transition()
        .duration(750)
        .attr("cx", function(d) { return x(d.x); })
        .attr("cy", function(d) { return height - y(d.y); })
        .attr("r", function(d) { return r(d.r); });
};
var updateButton = document.getElementById('update-data');
updateButton.addEventListener('click', function() {
    data = getData();
    redraw(data);
});
data = getData();
redraw(data);
&lt;/script&gt;&lt;p&gt;Voici le code de cette petite merveille.&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Data&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.axis&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;font&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="k"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.axis&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;.axis&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rendering&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crispEdges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chart&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width: 600px; height: 400px;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;update-data&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update data&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d3.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vizu.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Et &lt;em&gt;vizu.js&lt;/em&gt;. Je vous préviens, ce n'est pas du très beau js, mais il est tard et j'ai la flemme.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="c1"&gt;// Convention D3 pour gérer la marge du graphique
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// D3 nous propose des outils pour gérer les échelles de valeurs de nos données.
// Ici, nos données seront réparties sur un intervalle continu.
// Nous savons que nos données d'entrées sont comprises entre 0 et 100.
// En sortie, nous les étalerons sur l'axe des abscisses soit la largeur
// du graphe.
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;// domaine d'entrée
&lt;/span&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// domaine de sortie
&lt;/span&gt;
&lt;span class="c1"&gt;// Même chose pour l'axe des ordonnées.
// Notez qu'en SVG, la coordonnée (0, 0) se trouve en haut à gauche
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Helper qui renvoie des couleurs
// pour un rendu sympathique
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category20&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Nous créons l'élément SVG nécessaire au rendu du graphique.
// Et hop&amp;nbsp;! direct dans le DOM.
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#chart'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'svg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;translate(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Que serait un graphique sans axes&amp;nbsp;?
// L'api est généreuse et contient tout ce qu'il faut
// pour produire un rendu élégant
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bottom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x axis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;translate(0,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xAxis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;yAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;y axis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yAxis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * Notre fonction de génération de données aléatoires
 * Retourne un résultat de la forme suivante :
 * [
 *     { x: 10, y: 55, r: 5},
 *     { x: 87, y: 42, r: 2},
 *     …
 * ]
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_randomData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nbData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nbData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_randomData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/*
 * C'est ici que nous allons afficher nos données sous
 * forme de cercles chamarés et chatoyants.
 *
 * Le paramètre data est bien évidemment un tableau d'objets
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Créé la sélection initiale, et bind les données
&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;circles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'circle'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Lorsque l'on créé les nœuds, on les place directement au coordonnées
&lt;/span&gt;    &lt;span class="c1"&gt;// correctes, mais avec un rayon de 0, ce qui permettra une
&lt;/span&gt;    &lt;span class="c1"&gt;// animation des plus primesautières.
&lt;/span&gt;    &lt;span class="nx"&gt;circles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'circle'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Idem, lorsqu'une donnée n'existe plus, on fait disparaître le
&lt;/span&gt;    &lt;span class="c1"&gt;// cercle correspondant en réduisant élégamment son rayon à 0
&lt;/span&gt;    &lt;span class="nx"&gt;circles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Voici maintenant le traitement effectués sur les nœuds liés à
&lt;/span&gt;    &lt;span class="c1"&gt;// des données existantes. Notez que les nœuds de la sélection `enter`
&lt;/span&gt;    &lt;span class="c1"&gt;// seront également concernés ici.
&lt;/span&gt;    &lt;span class="nx"&gt;circles&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;updateButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update-data'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;updateButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Voilà pour l'exemple un peu plus complet. Ce n'est qu'un tout petit aperçu de ce qu'il est possible de faire avec D3.js. Je laisse le reste à votre imagination fertile. Et bonne année&amp;nbsp;!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Fri, 17 Jan 2014 11:31:00 +0100</pubDate><guid>tag:www.miximum.fr,2014-01-17:introduction-a-d3-js-et-aux-documents-pilotes-par-les-donnees.html</guid><category>d3</category><category>javascript</category></item><item><title>Jouons avec les automates cellulaires en Javascript</title><link>http://www.miximum.fr/jouons-avec-les-automates-cellulaires-en-javascript.html</link><description>&lt;p&gt;Vous savez tous ce que sont &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cellular_automaton"&gt;les automates cellulaires&lt;/a&gt;, n'est-ce pas&amp;nbsp;? Bon, pour les cancres et les gens qui ont vécu dans une cave pendant des années, je vous fait un court rappel. Un automate cellulaire est une grille à n dimensions, découpée en cases ou «&amp;nbsp;cellules&amp;nbsp;», chaque cellule pouvant adopter une parmi plusieurs valeurs à un instant t. La vie d'un automate cellulaire est découpée en intervalle de temps distcrt. À chaque itération, la valeur d'une cellule depend de la valeur des cellules environnantes lors de l'itération précédente. C'est clair&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;Le plus célèbre des automates cellulaires est très probablement le &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Jeu_de_la_vie"&gt;Jeu de la vie&lt;/a&gt; et ses fascinantes évolutions, mais c'est loin d'être le seul. Aujourd'hui, pour la beauté des yeux et du code, nous nous intéresserons aux automates cellulaires élémentaires.&lt;/p&gt;
&lt;p&gt;Ce type d'automate est le plus simple qu'il puisse exister : une seule dimension (une ligne au lieu d'une grille), deux valeurs possibles pour chaque cellule (0 ou 1) et chaque cellule ne dépend que d'elle même et ses deux voisins les plus proches pour ses changements d'états. Pourtant, même avec une telle simplicité, certains automates conservent des propriétés amusantes.&lt;/p&gt;

&lt;div class="section" id="comprendre-les-automates-cellulaires-elementaires"&gt;
&lt;h2&gt;Comprendre les automates cellulaires élémentaires&lt;/h2&gt;
&lt;p&gt;Chaque cellule dépend de trois cellules (elle-même et ses voisines) pour changer d'état, et il existe deux états possibles pour chaque cellule&amp;nbsp;; on comprend donc qu'il existe 2&lt;sup&gt;3&lt;/sup&gt; = 8 états possibles pour une cellule et ses voisines. Une règle associe à chacun de ces états une nouvelle valeur possible (0 ou 1). Cela nous donne donc 2&lt;sup&gt;8&lt;/sup&gt; = 256 règles différentes, quoiqu'en réalité certains automates soient équivalents par simple symétrie.&lt;/p&gt;
&lt;p&gt;Chaque automate peut être représenté par un tableau :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;État courant&lt;/th&gt;
&lt;th&gt;111&lt;/th&gt;
&lt;th&gt;110&lt;/th&gt;
&lt;th&gt;101&lt;/th&gt;
&lt;th&gt;100&lt;/th&gt;
&lt;th&gt;011&lt;/th&gt;
&lt;th&gt;010&lt;/th&gt;
&lt;th&gt;001&lt;/th&gt;
&lt;th&gt;000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Nouvel état&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;Ici, vous noterez que chaque cellule conserve l'état qu'elle avait à l'itération précédente, indépendamment de ses voisines. Stephen Wolfram a proposé une &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Wolfram_code"&gt;nomenclature pour les différentes règles&lt;/a&gt; : il suffit de convertir l'enchaînement de bits représentant le nouvel état (ici 1, 1, 0, 0, 1, 1, 0, 0) en décimal (ici, 204). La règle 204 est donc celle qui conserve l'identité de l'automate d'une itération à l'autre. Ce n'est certes pas la plus intéressante.&lt;/p&gt;
&lt;p&gt;Afin de pouvoir observer les différents effets produits par les multiples règles possibles, chaque ligne est représentée sous la précédente, ce qui fait apparaître de fabuleux motifs 2d (ou pas). Exemple de rendu avec la règle 110 :&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_110_random" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_110_random.png" /&gt;&lt;/p&gt;
&lt;p&gt;Sur chaque rendu, la première ligne a été génée aléatoirement, et toutes les lignes suivantes ont été générée à partir de la précédente.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="les-differents-types-d-automates"&gt;
&lt;h2&gt;Les différents types d'automates&lt;/h2&gt;
&lt;p&gt;Certaines règles produisent des automates plus ou moins intéressants. On peut assez rapidement se retrouver avec des états stables ou périodiques. Exemple avec la règle 218.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_218_random" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_218_random.png" /&gt;&lt;/p&gt;
&lt;p&gt;En revanche, si on fait tourner la même règle sur une ligne ou une seule cellule est activée, le résultat est beaucoup plus sympa.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_218_single" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_218_single.png" /&gt;&lt;/p&gt;
&lt;p&gt;D'autres automates produisent des résultats conservant un aspect chaotique et aléatoire sur la durée. Exemples avec les règles 150 et 182&amp;nbsp;; hypnotisant, n'est-ce-pas&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_150_random" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_150_random.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_283_random" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_283_random.png" /&gt;&lt;/p&gt;
&lt;p&gt;Enfin, certains automates présentent des propriétés vraiment particulières. Allez, je vous en présente deux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modeliser-le-traffic-avec-la-regle-184"&gt;
&lt;h2&gt;Modéliser le traffic avec la règle 184&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;État courant&lt;/th&gt;
&lt;th&gt;111&lt;/th&gt;
&lt;th&gt;110&lt;/th&gt;
&lt;th&gt;101&lt;/th&gt;
&lt;th&gt;100&lt;/th&gt;
&lt;th&gt;011&lt;/th&gt;
&lt;th&gt;010&lt;/th&gt;
&lt;th&gt;001&lt;/th&gt;
&lt;th&gt;000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Nouvel état&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;Cette règle peut s'interpréter ainsi : si quelque part sur l'automate il existe un 1 suivi d'un 0, le 1 se déplace sur la droite. Si le 1 est suivi d'un autre 1, il reste à sa place. Si on considère que chaque 1 modélise une voiture et chaque 0 une portion libre d'une route, alors on obtient un simulateur extrêmement basique de flux de traffic&amp;nbsp;: si la route est dégagée, la voiture roule&amp;nbsp;; sinon, elle s'arrête. Sur la capture suivante, on voit bien les vagues de ralentissements provoquées par un traffic chargé.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_184_random" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_184_random.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Biham%E2%80%93Middleton%E2%80%93Levine_traffic_model"&gt;La version 2d existe également.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="une-machine-de-turing-avec-la-regle-110"&gt;
&lt;h2&gt;Une machine de turing avec la règle 110&lt;/h2&gt;
&lt;p&gt;Parmi tous les automates élémentaires, la règle 110 est probablement la plus fascinante. Voici le rendu avec une seule cellule sur la première ligne.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_110_single" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_110_single.png" /&gt;&lt;/p&gt;
&lt;p&gt;Et avec une ligne génératrice aléatoire.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_110_single" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_110_single.png" /&gt;&lt;/p&gt;
&lt;p&gt;Cette règle présente l'étonnante particularité de générer des schémas en équilibre entre ordre et chaos. Mais surtout, il a été prouvé que &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Turing-complet"&gt;la règle 110 est Turing-Complet&lt;/a&gt;. C'est à dire que dans des conditions théoriques, il est possible d'utiliser cet automate pour programmer un ordinateur de Turing. Implémenter un interpréteur Python en règle 110 sera laissé en exercice au lecteur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nous-aussi-on-veut-jouer"&gt;
&lt;h2&gt;Nous aussi, on veut jouer&lt;/h2&gt;
&lt;p&gt;Je suis sûr que vous aussi, vous voulez vous amuser à générer des motifs plus fascinants les uns que les autres. Je suis sympa, je vous colle un bout de javascript pour que vous puissiez vous amuser. Il vous faudra néanmoins un navigateur &lt;a class="reference external" href="http://caniuse.com/#feat=css-canvas"&gt;supportant l'api canvas&lt;/a&gt;. N'hésitez pas à tester les &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Elementary_cellular_automaton"&gt;quelques règles les plus intéressantes&lt;/a&gt;.&lt;/p&gt;
&lt;form class="form-inline" id="control_form"&gt;
&lt;div class="control-group"&gt;&lt;label for="rule_number"&gt;Rule :&lt;/label&gt; &lt;input id="rule_number" type="number" max="255" min="0" value="110" /&gt;&lt;/div&gt;
&lt;div class="control-group"&gt;&lt;label for="mode_random"&gt;Random&lt;/label&gt; &lt;input id="mode_random" type="radio" name="mode" /&gt; &lt;label for="mode_single"&gt;Single cell&lt;/label&gt; &lt;input id="mode_single" type="radio" checked="checked" name="mode" /&gt;&lt;/div&gt;
&lt;input id="start_button" type="submit" name="start" value="Start" /&gt;
&lt;/form&gt;
&lt;canvas id="main_canvas"&gt; &lt;/canvas&gt;&lt;/div&gt;
&lt;div class="section" id="du-code-du-code"&gt;
&lt;h2&gt;Du code ! Du code&amp;nbsp;!&lt;/h2&gt;
&lt;p&gt;Allez, je suis sympa, je vous montre un peu de code. C'est un blog de développeur, oui ou non&amp;nbsp;?! On commence par un simple index.html.&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Test Cellular automaton&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="nf"&gt;#control_form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;control_form&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rule_number&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rule :&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;255&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rule_number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;110&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mode_random&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Random&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mode_random&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;random&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mode_single&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Single cell&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mode_single&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;single&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checked&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start_button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main_canvas&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./automaton.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./main.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Enchaînons avec automaton.js.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cellautomaton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Initialize the grid with random values
     */&lt;/span&gt;
    &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initRandom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Initialize the grid with a single cell in the middle of the row
     */&lt;/span&gt;
    &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initSingleCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cell_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;cell_index&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Apply the rule to move to the automaton's next step
     */&lt;/span&gt;
    &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextStep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// The slice() method without argument clones the array
&lt;/span&gt;        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nextStep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;nextStep&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNextStepValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextStep&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Get the next step value for given cell index
     */&lt;/span&gt;
    &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNextStepValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;left_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;left_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;right_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right_index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;right_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left_index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Use the canvas API to render the grid
     */&lt;/span&gt;
    &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2d'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Et nous terminerons avec main.js.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;HEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cellautomaton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nb_cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nb_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nb_cells&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nb_rows&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nb_cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nb_cells&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nb_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nb_rows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cellautomaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CellularAutomaton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nb_cells&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton_interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Set the cellular automaton evolving rule from it's wolfram code.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setWolframCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;binary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rule_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'000'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'001'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'010'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'011'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'100'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'101'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'110'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'111'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Clear the canvas
     */&lt;/span&gt;
    &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2d'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Start the automaton
     *
     * We will also clear any previously running automaton
     */&lt;/span&gt;
    &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random_mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setWolframCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random_mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initSingleCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nb_cells&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton_interval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton_interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nb_rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;automaton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;cellautomaton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main_canvas'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nb_cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WIDTH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nb_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HEIGHT&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;main_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nb_cells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nb_rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;submitHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'rule_number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mode_random_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mode_random'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mode_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mode_random_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;main_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode_random&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'submit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;submitHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;J'espère que ce petit article de culture générale aura eu l'heur de vous plaîre. Je vous laisse sur ce dernier rendu de la règle 85.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rule_85_random" src="http://www.miximum.fr/wp-content/uploads/2013/10/rule_85_random.png" /&gt;&lt;/p&gt;
&lt;script&gt;
var cellautomaton = (function() {
    "use strict";

    var CellularAutomaton = function(width) {
        this.width = width;
        this.cells = new Array(width);
        this.colors = {
            0: "white",
            1: "blue"
        }
    }

    CellularAutomaton.prototype.setRule = function(rule) {
        this.rule = rule;
    }

    /**
     * Initialize the grid with random values
     */
    CellularAutomaton.prototype.initRandom = function() {
        for (var i = 0 ; i &lt; this.width ; i++) {
            this.cells[i] = Math.floor(Math.random() * 2);
        }
    }

    CellularAutomaton.prototype.initSingleCell = function(cell_index) {
        for (var i = 0 ; i &lt; this.width ; i++) {
            this.cells[i] = i == cell_index ? 1 : 0;
        }
    }

    /**
     * Apply the rule to move to the automaton's next step
     */
    CellularAutomaton.prototype.nextStep = function() {
        // The slice() method without argument clones the array
        var nextStep = this.cells.slice();
        for (var i = 0 ; i &lt; this.width ; i++) {
            nextStep[i] = this.getNextStepValue(i);
        }

        this.cells = nextStep;
    }

    /**
     * Get the next step value for given cell index
     */
    CellularAutomaton.prototype.getNextStepValue = function(index) {
        var left_index = index - 1;
        if (left_index &lt; 0) {
            left_index = this.width - 1;
        }

        var right_index = index + 1;
        if (right_index &gt;= this.width) {
            right_index = 0;
        }

        var key = [
            this.cells[left_index],
            this.cells[index],
            this.cells[right_index]
        ].join('');
        return this.rule[key];
    }

    /**
     * Use the canvas API to render the grid
     */
    CellularAutomaton.prototype.drawOn = function(canvas, y) {
        var ctx = canvas.getContext('2d');
        for (var i = 0 ; i &lt; this.width ; i++) {
            ctx.fillStyle = this.colors[this.cells[i]];
            ctx.fillRect(i * 5, y * 5, 5, 5);
        }
    }

    return {
        CellularAutomaton: CellularAutomaton
    }
})();

var app = (function(cellautomaton) {
    "use strict";

    var App = function(canvas, nb_cells) {
        this.canvas = canvas;
        this.canvas.width = nb_cells * 5;
        this.canvas.height = 480;
        this.nb_cells = nb_cells;
        this.automaton = new cellautomaton.CellularAutomaton(nb_cells);
        this.automaton_interval = 0;
    }

    /**
     * Set the cellular automaton evolving rule from it's wolfram code.
     */
    App.prototype.setWolframCode = function(rule_number) {
        var binary = rule_number.toString(2);
        var pad = "00000000";
        var mask = pad.substring(0, pad.length - binary.length) + binary;
        var rule = {
            '000': mask[7],
            '001': mask[6],
            '010': mask[5],
            '011': mask[4],
            '100': mask[3],
            '101': mask[2],
            '110': mask[1],
            '111': mask[0]
        }
        this.automaton.setRule(rule);
    }

    /**
     * Clear the canvas
     */
    App.prototype.clear = function() {
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }

    /**
     * Start the automaton
     *
     * We will also clear any previously running automaton
     */
    App.prototype.run = function(rule, random_mode) {
        this.clear();
        this.setWolframCode(rule);

        if (random_mode) {
            this.automaton.initRandom();
        } else {
            this.automaton.initSingleCell(parseInt(this.nb_cells / 2));
        }

        var step = 0;
        clearInterval(this.automaton_interval);
        this.automaton_interval = setInterval(function(automaton) {
            automaton.drawOn(canvas, step % (this.canvas.height / 5));
            automaton.nextStep();
            step++;
        }, 100, this.automaton);
    }

    return {
        App: App
    }

})(cellautomaton);


var canvas = document.getElementById('main_canvas');
var nb_cells = 128;
var main_app = new app.App(canvas, nb_cells);

var submitHandler = function(evt) {
    evt.preventDefault();
    var input = document.getElementById('rule_number');

    var mode_random_input = document.getElementById('mode_random');
    var mode_random = mode_random_input.checked;

    var rule = parseInt(input.value);

    main_app.run(rule, mode_random);
}
document.addEventListener('submit', submitHandler);
&lt;/script&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Sun, 20 Oct 2013 08:49:00 +0200</pubDate><guid>tag:www.miximum.fr,2013-10-20:jouons-avec-les-automates-cellulaires-en-javascript.html</guid><category>automates cellulaires</category><category>canvas</category><category>html5</category><category>javascript</category><category>jeu de la vie</category></item><item><title>Découvrez Elkorado</title><link>http://www.miximum.fr/elkorado.html</link><description>&lt;div class="figure align-left"&gt;
&lt;img alt="Batman vs. Darth Vader (32/365)" src="http://www.miximum.fr/wp-content/uploads/2013/09/batman_vs_darth_vader_32365-300x199.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Samedi soir orageux, un bar à Gotham City. Pendant que je sirote tranquillement mon Bloody Mary, j'observe du coin de l'œil une scène qui me fait osciller entre la condescendance et l'hilarité. Un jeune homme à la pilosité faciale encore hésitante tente par tous les moyens de séduire une jolie blonde qui n'a pas l'air sensible à ses charmes.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Je te jure&amp;nbsp;! Puisque je te dis que je l'ai lu sur Internet&amp;nbsp;!&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Ah oui&amp;nbsp;? Tu pourrais me retrouver l'URL&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Euh, tu sais… ça fait pas mal de temps, alors…&lt;/div&gt;
&lt;div class="line"&gt;— Ah, ok…&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Elle se désintéresse en levant les yeux au ciel, tandis que je ricane dans ma barbe. Ça veut jouer les jolis cœurs, et ça n'est même pas capable de retrouver ses favoris.&lt;/p&gt;

&lt;p&gt;Alors que je me détourne de cette triste scène, mon attention est captée par une conversation animée échangée dans un groupe de cadres, costard cravate, Guinness à la main.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Alors, cette campagne de marketing viral, ça avance&amp;nbsp;?&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Tu parles, le boss n'y connait rien, il veux absolument que je lui forwarde tous les articles sur lesquels je tombe. Je passe mon temps à surfer sur les blogs de marketeux pour trouver des trucs intéressants au lieu de bosser.&lt;/div&gt;
&lt;div class="line"&gt;– La plaie&amp;nbsp;! C'est dommage, tu m'aurais demandé, je t'aurais envoyé deux ou trois urls sympas.&lt;/div&gt;
&lt;div class="line"&gt;– Ouais. D'ailleurs, il faudra qu'on pense à centraliser tout ça, un de ces quatre. On ne doit pas être les seuls intéressés. »&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;C'est vrai que c'est ballot, toutes ces informations perdues dans les limbes des trames réseaux. Alors que je dirige vers la sortie pour allumer une cigarette, je croise une jeune femme qui sanglote, effondrée dans un coin. Une amie essaye de la réconforter.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Mais moi je le trouvais cool, cet article. Sinon, je ne l'aurais pas posté.&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Oui, mais tu sais comment c'est, sur le web. Les gens s'énervent vite, et puis avec tous ces idiots qui se croient bien à l'abri derrière leur écran…&lt;/div&gt;
&lt;div class="line"&gt;— Quand même, me faire traiter de nazie parce que je me suis trompée de sous-catégorie&amp;nbsp;? C'est un peu fort quand même&amp;nbsp;! En plus, impossible de débattre de la conclusion de l'article, il y a ces deux types qui ont pourri le thread en postant des dizaines de gifs de chatons.&amp;nbsp;»&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;La pauvre me fait de la peine. Il faudrait vraiment que quelqu'un fasse quelque chose…&lt;/p&gt;
&lt;p&gt;Soudain, une exclamation, et une rumeur se répand dans la foule. Un immense faisceau déchire les ténèbres, et trace sur la noire voûte céleste une majestueuse tête de cerf. Alors que la foule se précipite au dehors pour mieux voir, négligeant les trombes d'eau qui s'abattent sur elle, un éclair illumine le ciel. Sur le toit d'un immeuble proche, une silhouette se découpe fièrement.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;«&amp;nbsp;Regardez, c'est lui&amp;nbsp;!&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Nous sommes sauvés&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— C'est… C'est… Elkorado man !&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="elkorado-pour-gerer-ses-pepites-comme-les-pros"&gt;
&lt;h2&gt;Elkorado, pour gérer ses pépites comme les pros&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" class="full" src="http://www.miximum.fr/wp-content/uploads/2013/09/elkorado.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Je ne crois pas vous avoir déjà parlé de Nico ? Nico, c'est un des types les plus chouettes que je connaisse (et vous savez que je suis difficile), et un très bon ami depuis de longues années. J'avais une photo de nous deux mais il n'a pas voulu que je la publie, tant pis.&lt;/p&gt;
&lt;p&gt;En plus d'être un gars très chouette, Nico est également &lt;a class="reference external" href="http://namlook.github.io/mongokit/"&gt;contributeur open-source&lt;/a&gt; et entrepreneur. Depuis plusieurs mois, il travaille sur &lt;a class="reference external" href="http://www.elkorado.com/"&gt;un projet qui lui tient vraiment à cœur&amp;nbsp;: Elkorado&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elkorado, du coup, je m'en sers quasi-quotidiennement. Alors, quand Nico m'a demandé si je pouvais lui prêter un peu de place sur Miximum pour l'aider à promouvoir sa vision et son travail, je ne pouvais que dire oui. Voici donc une petite présentation d'Elkorado, un service qui pourrait vous intéresser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qu-est-ce-que-c-est-a-quoi-ca-sert"&gt;
&lt;h2&gt;Qu'est-ce que c'est&amp;nbsp;? À quoi ça sert&amp;nbsp;?&lt;/h2&gt;
&lt;div class="figure align-left"&gt;
&lt;img alt="" src="http://www.miximum.fr/wp-content/uploads/2013/09/elkorado_mobile-244x300.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Elkorado est un outil qui entre dans la très &lt;em&gt;hype&lt;/em&gt; catégories des outils de curation collaboratifs. Quand je parle de curation, ça n’a rien à voir avec les cotons tiges, nous sommes d’accord ?&lt;/p&gt;
&lt;p&gt;Son but est de centraliser les liens vers du contenu pérenne et de qualités (pas de news moisies, donc). Le but en effet est de faire la part belle à la qualité du contenu. D'ailleurs, on ne parlera pas de favoris, ni de bookmarks ou de signets, mais de pépites.&lt;/p&gt;
&lt;p&gt;Ainsi, vous pourrez découvrir de nouvelles pépites, et effectivement retrouver les votres facilement même après trois cuites et une séance de debug avec le stagiaire. À la première lecture, on pourrait croire à un vulgaire delicious like, mais il n’en est rien.&lt;/p&gt;
&lt;p&gt;D'abord, les pépites sont thématisées, et les thématiques sont présélectionnées. Il n'est pas possible d'utiliser vos propres tags ou catégories fantasques, tout le monde est logé à la même enseigne. Beaucoup plus facile pour retrouver son contenu, et beaucoup plus intéressant de s'intéresser à une thématique particulière. D'autant que les thématiques sont internationalisées et désambiguisées : Java (la danse), Java (l'île) et Java (le langage de programmation) sont bien des catégories distinctes.&lt;/p&gt;
&lt;div class="figure align-right"&gt;
&lt;img alt="" src="http://www.miximum.fr/wp-content/uploads/2013/09/ajouter_une_pepite-300x294.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Aujourd'hui ou la moindre e-boutique de vente de brosses à dent en ligne embarque son réseau social, Elkorado est agréablement dépourvu de toute fonction d'échange et de communication. Entendez par là qu'il n'est pas possible de poster des messages à d'autres membres du site, ou de commenter les pépites de quiconque. Si vous cherchez un endroit ou élever de gros trolls velus ou discuter des meilleurs groupes de rock nazis, passez votre chemin. Tout au plus est-il possible de recommander un lien à un ami. Autre avantage, on évite de déporter les éventuels commentaires sur une n-ième plateforme alors qu'ils feraient mieux d'être postés au plus près du contenu original.&lt;/p&gt;
&lt;p&gt;Enfin, rajouter une pépite est un poil laborieux. Ça a l'air naze dit comme ça, mais c'est en fait une &lt;em&gt;feature&lt;/em&gt; des plus utiles. Parce que ça signifie que vous n'y ajouterez que les pépites qui vous intéressent réellement, et pareil pour tous les membres du site. La conséquence est que le rapport signal / bruit qu'on trouve sur Elkorado est particulièrement élevé : on y voit passer de trés bons liens, et assez peu de trucs inutiles.&lt;/p&gt;
&lt;p&gt;Évidemment, en plus de pouvoir stocker vos pépites, vous allez pouvoir suivre des personnes ou des thèmatiques qui vous intéressent, ce qui permet d'avoir une &lt;em&gt;timeline&lt;/em&gt; à forte valeur ajoutée (c'est important, la valeur ajoutée).&lt;/p&gt;
&lt;p&gt;Enfin, si comme moi vous avez tendance à avoir 42 onglets ouverts en permanence parce que vous n'avez pas le temps de lire tous les liens qui vous tombent sous le curseur, vous apprécierez particulièrement la fonctionnalité «&amp;nbsp;Read it later&amp;nbsp;», utile pour mettre un lien de côté avant de décider s'il mérite l'honorable qualification de pépite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="un-service-jeune-qui-a-besoin-d-encouragements"&gt;
&lt;h2&gt;Un service jeune qui a besoin d'encouragements&lt;/h2&gt;
&lt;p&gt;Même si c'est un projet mûri de longue date, Elkorado reste un service jeune, et développé par une seule personne. Il y a donc peut-être quelques points perfectibles, mais le travail continue.&lt;/p&gt;
&lt;p&gt;Bref, Elkorado est un projet prometteur, qui mérite vraiment qu'on y jette un coup d'œil. Si les outils existants ne vous conviennent pas, pourquoi ne pas lui donner sa chance&amp;nbsp;? Je vous invite à &lt;a class="reference external" href="http://www.elkorado.com/thibaultj"&gt;parcourir mes pépites&lt;/a&gt; et &lt;a class="reference external" href="http://www.elkorado.com/auth/signup"&gt;ajouter les vôtres&lt;/a&gt; : plus on est de fou…&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 02 Oct 2013 14:37:00 +0200</pubDate><guid>tag:www.miximum.fr,2013-10-02:elkorado.html</guid></item><item><title>Synchronize all your mailboxes on your own private email server</title><link>http://www.miximum.fr/synchronize-all-your-mailboxes-on-your-own-server.html</link><description>&lt;p&gt;Everybody works from multiple devices nowadays. I do. And if you are like me, you want your data to be synchronized between your desktop, laptop, smartphone, tablet, and so on.&lt;/p&gt;
&lt;p&gt;Let's take emails, for example. When I read an email on my laptop, it should automatically be marked as such on my desktop. When I send a message from my smartphone, I want it to appear in the &amp;quot;sent&amp;quot; directory of my laptop's mail reader. You get the point.&lt;/p&gt;
&lt;p&gt;The thing is I use several email addresses. One for work, one for personnal stuff, one for every site that I manage, and so on. It makes synchronization much more difficult. And I want to read and send all my emails from a desktop client.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Synchronizing all your email addresses" class="full" src="http://www.miximum.fr/wp-content/uploads/2013/09/Mail_architecture.png" /&gt;
&lt;/div&gt;

&lt;p&gt;After fiddling around, I came up with a nice mail server configuration that brings the following features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Configure everything from a single place.&lt;/li&gt;
&lt;li&gt;Centralize all your emails on a single private place.&lt;/li&gt;
&lt;li&gt;Synchronize all your email clients easily.&lt;/li&gt;
&lt;li&gt;Allows me to use desktop client to read / write my emails.&lt;/li&gt;
&lt;li&gt;Works with several addresses and multiples ISPs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's do this.&lt;/p&gt;
&lt;div class="section" id="a-bit-of-architecture"&gt;
&lt;h2&gt;A bit of architecture&lt;/h2&gt;
&lt;p&gt;Here's an another beautiful image to help you understand the architecture we will be setting up. Of course, you need a personal server somewhere. Mine runs on Debian.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Mail_architecture_inside" class="more" src="http://www.miximum.fr/wp-content/uploads/2013/09/Mail_architecture_inside.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Every mail we receive will be stored in a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Maildir"&gt;Maildir formatted directory&lt;/a&gt;. This directory will be &lt;a class="reference external" href="http://www.dovecot.org/"&gt;served by Dovecot&lt;/a&gt; using the Imap protocol. So every modification made by a mail client is synchronized on the server.&lt;/p&gt;
&lt;p&gt;As for outgoing mail, we will route them to the correct smtp server depending on the sender's address &lt;a class="reference external" href="http://www.postfix.org/"&gt;using Postfix&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-your-mailbox"&gt;
&lt;h2&gt;Configuring your mailbox&lt;/h2&gt;
&lt;p&gt;The first thing to do is to install and configure Dovecot to serve your Maildir directory using the Imap protocol.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
aptitude install dovecot-common dovecot-imapd
vi /etc/dovecot/dovecot.conf
&lt;/pre&gt;
&lt;p&gt;Here's a working configuration file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
protocols = imaps
log_timestamp = &amp;quot;%Y-%m-%d %H:%M:%S &amp;quot;
ssl = required
mail_location = maildir:~/Maildir
mail_privileged_group = mail

auth default {
  mechanisms = plain login
  user = root

  # Export the authentication system for Postfix to use
  socket listen {
    client {
      path = /var/spool/postfix/private/auth
      group = postfix
      mode = 0660
    }
  }
&lt;/pre&gt;
&lt;p&gt;Don't forget to create the user's maildir directory. If you didn't create the user yet, now would be a good time.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
adduser thibault  &lt;span class="c"&gt;# this is my name!
&lt;/span&gt;maildirmake.dovecot  /home/thibault/Maildir thibault  &lt;span class="c"&gt;# initialize maildir
&lt;/span&gt;/etc/init.d/dovecot restart
&lt;/pre&gt;
&lt;p&gt;Now, you should be able to configure your mail client to access your brand new imap server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="populating-your-mailbox"&gt;
&lt;h2&gt;Populating your mailbox&lt;/h2&gt;
&lt;p&gt;There is still some work to do before we go back on the beach to drink cocktails. Because your brand new mailbox is desperatly empty, and we need to populate it. This will be &lt;a class="reference external" href="http://pyropus.ca/software/getmail/"&gt;Getmail's job&lt;/a&gt;, with &lt;a class="reference external" href="http://www.procmail.org/"&gt;Procmail's help&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
aptitude install getmail4 procmail
&lt;/pre&gt;
&lt;p&gt;Don't forget to login as your user to configure those.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
su - thibault
&lt;span class="nb"&gt;cd&lt;/span&gt; ~
mkdir .getmail
&lt;/pre&gt;
&lt;p&gt;You will need one configuration file by email address. Here's a working example for Gmail:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#  ~/.getmail/getmail.gmail

[retriever]
type = SimplePOP3SSLRetriever
server = pop.gmail.com
username = myemail&amp;#64;gmail.com
password = mypassword

[destination]
type = MDA_external
path = /usr/bin/procmail
arguments = (&amp;quot;-f&amp;quot;, &amp;quot;%(sender)&amp;quot;, &amp;quot;-m&amp;quot;, &amp;quot;/home/thibault/.procmailrc&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;You should note that in the &amp;quot;destination&amp;quot; section, we tell Getmail to pass the message to Procmail instead of processing it by itself. You will also notice that we store the password in a file, and that sucks. Fortunately, you can secure your Google account so every application that accesses you Google account needs a different password. In the Google homepage, search in My Account &amp;gt; Security.&lt;/p&gt;
&lt;p&gt;Every time getmail is launched, it will download every mail in your inbox. This is not a problem with Gmail, because read emails are archived, but it could be a pain with other providers. That's why &lt;a class="reference external" href="http://pyropus.ca/software/getmail/configuration.html#conf-options"&gt;we will add a few more configuration parameters&lt;/a&gt; to our files.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[retriever]
…

[destination]
…

[options]
read_all = false
delete = false
delete_after = 15
&lt;/pre&gt;
&lt;p&gt;Don't forget to set some restrictive rights to protect your passwords.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
chmod go-rwX ~/.getmail -R
&lt;/pre&gt;
&lt;p&gt;Before we can test our configuration, we still need to configure Procmail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filtering-incoming-emails"&gt;
&lt;h2&gt;Filtering incoming emails&lt;/h2&gt;
&lt;p&gt;Procmail's job is to dispatch incoming emails into the correct folder. All you need to do is to create a ~/.procmailrc file. Here's a minimal example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MAILDIR=$HOME/Maildir/

:0
$HOME/Maildir/
&lt;/pre&gt;
&lt;p&gt;With this configuration, every single message will go in the default inbox. Here's a better example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MAILDIR=$HOME/Maildir/

:0  # Here is a new rule
* ^X-Spam-Status: Yes  # This is a condition
.Spam/  # Here is the destination for mails matching the condition

:0
* ^From.*coolclient\.fr  # Conditions match mail headers
.Coolclient/

:0
* ^(To|Cc|Bcc).*spamemail\.fr  # You can match several headers at one
.ProbablyTrash/

:0
* ^From.*annoyingfriend
* ^Subject.*FW  # You can add several conditions, they will be ADDed
.Friends.ProbablyTrash/  # Note the syntax for subfolders

:0
* ^To.*personalemail
.Friends/

# Don't forget the &amp;quot;catch all&amp;quot; rule at the end of the file
:0
$HOME/Maildir/
&lt;/pre&gt;
&lt;p&gt;Let's test everything, still logged in as your user:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
getmail --rcfile getmail.gmail --rcfile getmail.otherprovider --rcfile getmail.thirdprovider

getmail version 4.20.0
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; 1998-2009 Charles Cazabon.  Licensed under the GNU GPL version 2.
SimplePOP3SSLRetriever:xxx&amp;#64;gmail.com&amp;#64;pop.gmail.com:995:
  0 messages &lt;span class="o"&gt;(&lt;/span&gt;0 bytes&lt;span class="o"&gt;)&lt;/span&gt; retrieved, 0 skipped
SimplePOP3SSLRetriever:xxx&amp;#64;xxx:995:
  0 messages &lt;span class="o"&gt;(&lt;/span&gt;0 bytes&lt;span class="o"&gt;)&lt;/span&gt; retrieved, 36 skipped
SimplePOP3SSLRetriever:txxx&amp;#64;xxx:995:
  0 messages &lt;span class="o"&gt;(&lt;/span&gt;0 bytes&lt;span class="o"&gt;)&lt;/span&gt; retrieved, 117 skipped
&lt;/pre&gt;
&lt;p&gt;If you are lucky and carefully followed this tutorial, everything should work perfectly. Once you are sure that everything is ok, you can have getmail being launched regularly from a cronjob.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
crontab -e

&lt;span class="c"&gt;# Add this new rule to run getmail every five minutes
&lt;/span&gt;*/5 * * * * getmail -q --rcfile getmail.gmail --rcfile getmail.otherprovider --rcfile getmail.thirdprovider
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-your-email-client"&gt;
&lt;h2&gt;Configure your email client&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="claws-mail-imap-configuration" class="full" src="http://www.miximum.fr/wp-content/uploads/2013/09/claws-mail-imap-configuration.png" /&gt;
&lt;/div&gt;
&lt;p&gt;You could perfectly install a web server like &lt;a class="reference external" href="http://squirrelmail.org/"&gt;SquirrelMail&lt;/a&gt; or &lt;a class="reference external" href="http://roundcube.net/"&gt;Roundcube&lt;/a&gt; to access your emails from a web interface, but I prefer desktop clients. &lt;a class="reference external" href="http://www.claws-mail.org/"&gt;Claws mail is my absolute favorite&lt;/a&gt;&amp;nbsp;; it's light and fast.&lt;/p&gt;
&lt;p&gt;To configure Claws mail (but those parameters will do with any other mail client), create a new account. In &amp;quot;Protocol&amp;quot; choose &amp;quot;Imap&amp;quot; and type in the address of your server. The username is the unix user you created earlier, and the password is the unix password. In &amp;quot;SSL configuration&amp;quot;, don't forget to tick Imap &amp;gt; Use SSL….&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-emails"&gt;
&lt;h2&gt;Sending emails&lt;/h2&gt;
&lt;p&gt;Receiving emails is good, but sending them is better, right? We will now install and configure Postfix on our server to act as a SMTP relay. Indeed, we don't want Postfix to directly send emails, because spam problems are hard to overcome. Rather than that, we want Postfix to transfer outgoing mails to the correct smtp server (i.e the one of your provider) &lt;strong&gt;depending on the sender's address&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So if I send an email from my Gmail address, I want it to be routed through the smtp.gmail.com, but if I send it from my miximum.fr adress, I want it to be routed through Gandi's smtp, which is the provider I registered my domain name from.&lt;/p&gt;
&lt;p&gt;First step, install Postfix (as root):&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
aptitude install postfix libsasl2 ca-certificates libsasl2-modules
&lt;/pre&gt;
&lt;p&gt;Let's create a file to configure our routing table.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cat &amp;lt;/etc/postfix/relayhost_map
myemail&amp;#64;gmail.com &lt;span class="o"&gt;[&lt;/span&gt;smtp.gmail.com&lt;span class="o"&gt;]&lt;/span&gt;:587
myemail&amp;#64;miximum.fr &lt;span class="o"&gt;[&lt;/span&gt;mail.gandi.net&lt;span class="o"&gt;]&lt;/span&gt;:587
myemail&amp;#64;otherisp.fr &lt;span class="o"&gt;[&lt;/span&gt;smtp.otherisp.net&lt;span class="o"&gt;]&lt;/span&gt;:587
EOF
postmap /etc/postfix/relayhost_map
&lt;/pre&gt;
&lt;p&gt;You can also configure different TLS policies if different Isps take different parameters.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cat &amp;lt;/etc/postfix/smtp_tls_policy
&lt;span class="o"&gt;[&lt;/span&gt;smtp.gmail.com&lt;span class="o"&gt;]&lt;/span&gt;:587 secure
&lt;span class="o"&gt;[&lt;/span&gt;mail.gandi.net&lt;span class="o"&gt;]&lt;/span&gt;:587 secure
&lt;span class="o"&gt;[&lt;/span&gt;smtp.otherisp.net&lt;span class="o"&gt;]&lt;/span&gt;:587 secure
EOF
postmap /etc/postfix/smtp_tls_policy
&lt;/pre&gt;
&lt;p&gt;You also need to create a password database. For each line, the syntax is &lt;em&gt;sender login:password&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cat &amp;lt;/etc/postfix/passwd
myemail&amp;#64;gmail.com myemail&amp;#64;gmail.com:mygmailpassword
&amp;#64;miximum.fr myemail&amp;#64;miximum.fr:mygandipassword
&amp;#64;otherisp.net myemail&amp;#64;otherisp.net:myotherisppassword
EOF
postmap /etc/postfix/passwd
chmod 600 /etc/postfix/passwd*
&lt;/pre&gt;
&lt;p&gt;Finaly, edit the Postfix configuration file, /etc/postfix/main.cf.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Server side authentication
# I.e between your mail client and Postfix
# We will use the authentication mechanism exported by dovecot
smtpd_sasl_auth_enable = yes
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth

# Restrictions in clients allowed to send us emails
smtpd_client_restrictions =
    permit_mynetworks, permit_sasl_authenticated,
    sleep 1, reject_unauth_pipelining
smtpd_helo_restrictions = reject_invalid_helo_hostname
smtpd_sender_restrictions =
    permit_mynetworks, permit_sasl_authenticated,
    reject_non_fqdn_sender
smtpd_recipient_restrictions = permit_auth_destination,
    permit_mynetworks, permit_sasl_authenticated,
    reject_unauth_destination

# TLS parameters
smtpd_use_tls = yes
smtpd_tls_auth_only = yes
smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

# Relay configuration
# We tell postfix that the relayhost to use depends on the sender address
sender_dependent_relayhost_maps = hash:/etc/postfix/relayhost_map

# Client side authentication
# I.e between Postfix and other smtp servers
smtp_sasl_auth_enable = yes

# We tell postfix to use different password depending on the sender's address
smtp_sender_dependent_authentication = yes
smtp_sasl_password_maps = hash:/etc/postfix/passwd
smtp_sasl_security_options = noanonymous
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt

# TLS parameters
smtp_use_tls = yes
smtp_tls_policy_maps = hash:/etc/postfix/smtp_tls_polic


# Other Postfix default parameters
smtpd_banner = $myhostname ESMTP $mail_name (Debian/GNU)
biff = no
append_dot_mydomain = no
readme_directory = no
myhostname = my.server.url
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
myorigin = /etc/mailname
mydestination = my.server.url, localhost.server.url, localhost
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = all
inet_protocols = ipv4
&lt;/pre&gt;
&lt;p&gt;Once this is done, restart Postfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-emails-from-your-client"&gt;
&lt;h2&gt;Sending emails from your client&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="claws-mail-inbox" src="http://www.miximum.fr/wp-content/uploads/2013/09/claws-mail-inbox.png" /&gt;
&lt;/div&gt;
&lt;p&gt;We have configured an Imap account with Claws mail to receive emails. Now we need to configure accounts to send them. You will need one account for each email address.&lt;/p&gt;
&lt;p&gt;Create a new account. In &amp;quot;email address&amp;quot;, use your real email address, e.g &lt;a class="reference external" href="mailto:myemail&amp;#64;gmail.com"&gt;myemail&amp;#64;gmail.com&lt;/a&gt;. In &amp;quot;Protocols&amp;quot; choose &amp;quot;None (SMTP only)&amp;quot; and type in your server's address. In the &amp;quot;Send&amp;quot; section, don't forget to check &amp;quot;SMTP Auth&amp;quot;, choose &amp;quot;Automatic&amp;quot;, and use the same username and password as before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done!&lt;/h2&gt;
&lt;p&gt;Done! We have a beautiful mail server acting as a proxy between all our devices and our multiple mail service providers. Now, there are a few thing we could do to go further, but I'll leave this as an exercice:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Configure a regular backup&lt;/li&gt;
&lt;li&gt;Make sure our server's is up to date and apply security best practices&lt;/li&gt;
&lt;li&gt;Install and configure a web client like Mailsquirrel or Roundcube&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Mon, 23 Sep 2013 16:44:00 +0200</pubDate><guid>tag:www.miximum.fr,2013-09-23:synchronize-all-your-mailboxes-on-your-own-server.html</guid><category>claws-mail</category><category>cloud</category><category>dovecot</category><category>getmail</category><category>maildir</category><category>postfix</category><category>privacy</category><category>procmail</category></item><item><title>La police de la civilité</title><link>http://www.miximum.fr/la-police-de-la-civilite.html</link><description>&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— De toutes façons, on peut dire ce qu'on veut, pour moi le mariage c'est un homme et une femme.&lt;/div&gt;
&lt;div class="line"&gt;— C'est vrai, un gamin, il a besoin d'un père et d'une mère, sinon il peut pas être équilibré.&lt;/div&gt;
&lt;div class="line"&gt;— Ouais&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— Ouais&amp;nbsp;! c'est vrai&amp;nbsp;! c'est la nature&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— C'est clair, sinon il va forcément devenir pédé.&lt;/div&gt;
&lt;div class="line"&gt;— C'est à cause de ça qu'on se retrouve avec des générations de chômeurs. Tous ces parasites qui profitent du système.&lt;/div&gt;
&lt;div class="line"&gt;— Ça c'est rien. L'autre jour, ma belle sœur a vu une femme voilée que sortait de la caf. Déjà qu'ils viennent nous piquer le travail, en plus ils ont droit à toutes les aides. Et ce sont nos impôts qui payent, ça c'est sûr.&lt;/div&gt;
&lt;div class="line"&gt;— Pays d'assistés&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— Moi je suis pas raciste, mais ya encore une voiture qui a brûlé à deux rues de chez nous hier soir. Toutes façons, il suffit de regarder : chaque fois qu'il y a un problème, c'est la faute à ces gens là.&lt;/div&gt;
&lt;div class="line"&gt;— Oh, sinon, vous avez vu le match hier&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Rhoooo&amp;nbsp;! ces pédés de l'OM, qu'est-ce qu'on leur a mis, ouaahh !&lt;/div&gt;
&lt;div class="line"&gt;— POLICE ! Tout le monde à terre, les mains sur la tête&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— Quoi&amp;nbsp;? C'est quoi ce…&lt;/div&gt;
&lt;div class="line"&gt;— La ferme&amp;nbsp;! À plat ventre j'ai dit&amp;nbsp;! Vous avez été pris en flagrant délit de beaufitude. Tout ce que vous direz pourra être retenu contre vous. Et avec les enregistrements qu'on vient de récupérer, l'addition va être salée mes gaillards. Allez&amp;nbsp;! Emmenez-moi tout ça&amp;nbsp;!&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Allo&amp;nbsp;?!&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— Je suis dans le train, là.&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— Je dis JE SUIS DANS LE TRAIN&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— Ouais, bien et toi&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— Tu m'étonnes. Alors, tu racontes quoi de beau&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— Ouais, nous, on est partis avec Antoine sur la côte. Je te racontes pas les soirées&amp;nbsp;! On a revu Émilie, qui nous a hébergé quelques jours. Si tu la voyais, rhoo ! c'est devenu une vraie baleine. C'est un peu minable chez elle, mais bon, au moins on n'a pas payé l'hôtel. Tiens, d'ailleurs, t'as des nouvelles de Laurent&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— C'est pas vrai&amp;nbsp;?! Nooooonnn… Tu me diras, ça ne m'étonnes pas, je l'ai jamais trop senti ce mec. Attends attends&amp;nbsp;! quittes pas. Oui&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Police de l'incivilité, brigade ferroviaire. Veuillez me suivre madame.&lt;/div&gt;
&lt;div class="line"&gt;— Mais pourquoi&amp;nbsp;? Qu'est-ce qui se passe&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Téléphoner dans les wagons est un délit civique de deuxième catégorie. Vous êtes en état d'arrestation. Je vous demande de me suivre sans résistance. Si vous refusez de coopérer, je serai dans l'obligation d'appeler des renforts.&lt;/div&gt;
&lt;div class="line"&gt;— Euh… Je te rappelle.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Un problème, monsieur l'agent ?&lt;/div&gt;
&lt;div class="line"&gt;— Montrez moi vos papiers, permis, carte grise, pièce d'identité.&lt;/div&gt;
&lt;div class="line"&gt;— Voilà. Mais quelque chose ne va pas monsieur l'agent&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Police de l'incivilité, brigade routière. Vous avez été flashé par notre patrouilleur en plein changement de file sans clignotant.&lt;/div&gt;
&lt;div class="line"&gt;— Mais monsieur l'agent, ce n'est quand même pas très grave, si&amp;nbsp;? Je veux dire, on n'arrête quand même pas les gens pour ça&amp;nbsp;?!&lt;/div&gt;
&lt;div class="line"&gt;— Je vois que vous êtes récidiviste. Vous avez déjà reçu un avertissement le mois dernier pour utilisation agressive de l'avertisseur sonore. Je vais devoir vous demander de sortir du véhicule.&lt;/div&gt;
&lt;div class="line"&gt;— Quoi&amp;nbsp;?! Mais avec tous ces cons sur la route, pourquoi m'arrêtez-vous moi ? Vous n'avez rien de mieux à faire&amp;nbsp;? Vous feriez mieux de vous occuper des vrais criminels.&lt;/div&gt;
&lt;div class="line"&gt;— Monsieur, des comportements comme les vôtres empoisonnent la vie de millions de français. Je vous rappelle que la lutte contre l'incivilité est devenue priorité nationale depuis la grande consultation de novembre 2018. La loi Copé / Fillon de 2020 m'autorise à procéder à votre arrestation.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Yo&amp;nbsp;! YO&amp;nbsp;! André ! Monte un peu le son, là&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— Eh&amp;nbsp;! mais ton verre est vide. Je te ressers&amp;nbsp;?&lt;/div&gt;
&lt;div class="line"&gt;— Tu vois, le problème, aujourd'hui, c'est que les gens n'aiment plus travailler…&lt;/div&gt;
&lt;div class="line"&gt;— Et alors, je lui ai dit…&lt;/div&gt;
&lt;div class="line"&gt;— Quelqu'un veut du rosé&amp;nbsp;? Je vais quand même pas ouvrir la bouteille si je suis tout seul.&lt;/div&gt;
&lt;div class="line"&gt;— Et alors, il m'a répondu…&lt;/div&gt;
&lt;div class="line"&gt;— Aie gate euh filing… Wouuuuhouuuuu…&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;BLAM&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— POLICE&amp;nbsp;! Tout le monde les mains sur le mur&amp;nbsp;! Lâche ce verre ! Lâche ce verre&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— Qu'est-ce qui se passe&amp;nbsp;!?&lt;/div&gt;
&lt;div class="line"&gt;— Police de l'incivilité, brigade sonore&amp;nbsp;! On nous a signalé des nuisances sonores après 22h. Montrez-nous vos permis civiques.&lt;/div&gt;
&lt;div class="line"&gt;— Oh&amp;nbsp;non, soyez-cool&amp;nbsp;! On peut quand même s'amuser un peu, non&amp;nbsp;? En plus, je n'ai plus que 4 points.&lt;/div&gt;
&lt;div class="line"&gt;— Pas mon problème. Il fallait y penser avant d'emmerder tes voisins.&lt;/div&gt;
&lt;div class="line"&gt;— …&lt;/div&gt;
&lt;div class="line"&gt;— On embarque vos permis, vous viendrez les chercher demain au commissariat. Si votre décompte de points passe en négatif, vous devrez vous inscrire à un stage de bonnes manières, et porter le brassard réglementaire «&amp;nbsp;Je suis un gros con&amp;nbsp;» lors de vos sorties en dehors de votre domicile.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Le bâtiment est encerclé, toutes les issues sont surveillées ! Tu ne peux pas d'échapper, Martoni. Rends-toi sans résister, et le jury en tiendra compte.&lt;/div&gt;
&lt;div class="line"&gt;— Jamais&amp;nbsp;! Vous ne m'aurez pas&amp;nbsp;! Vous n'avez même pas de preuves&amp;nbsp;! Laissez-moi tranquille&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— On sait que tu es passé devant quelqu'un dans la file d'attente, à la Poste du centre ville. On a les enregistrements de la caméra de surveillance.&lt;/div&gt;
&lt;div class="line"&gt;— Salauds&amp;nbsp;! J'étais pressé&amp;nbsp;! Et tous ces vieux à la retraite, ils sont obligés de faire leurs courses en même temps que ceux qui travaillent&amp;nbsp;?! Et puis ça ne serait pas arrivé s'il y avait eu plus de guichets ouverts.&lt;/div&gt;
&lt;div class="line"&gt;— Sors tout de suite les mains sur la tête, ou je ne pourrai plus rien pour toi.&lt;/div&gt;
&lt;div class="line"&gt;— Vous ne m'aurez pas&amp;nbsp;! Le premier flic qui entre, je lui jette un emballage de Twix vide aux pieds&amp;nbsp;!&lt;/div&gt;
&lt;div class="line"&gt;— Pour la dernière fois, rends toi Martoni, ou on enfonce la porte.&lt;/div&gt;
&lt;div class="line"&gt;— Plutôt crever&amp;nbsp;!&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Une brigade défonce la porte, et s'engouffre dans le bâtiment. Des cris, des coups de feu.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;— Équipe delta à central. La cible est neutralisée. Toute la zone est dégagée. Je répète, toute la zone est dégagée.&lt;/div&gt;
&lt;div class="line"&gt;— Bien reçu, équipe delta. Beau travail. On rentre.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 04 Sep 2013 19:53:00 +0200</pubDate><guid>tag:www.miximum.fr,2013-09-04:la-police-de-la-civilite.html</guid></item></channel></rss>